// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/param.proto

#ifndef PROTOBUF_proto_2fparam_2eproto__INCLUDED
#define PROTOBUF_proto_2fparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fparam_2eproto {
// Internal implementation detail -- do not use these members.
struct CODE_LIB_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void CODE_LIB_EXPORT AddDescriptors();
void CODE_LIB_EXPORT InitDefaultsparam_ParamListEntry_DoNotUseImpl();
void CODE_LIB_EXPORT InitDefaultsparam_ParamListEntry_DoNotUse();
void CODE_LIB_EXPORT InitDefaultsparamImpl();
void CODE_LIB_EXPORT InitDefaultsparam();
void CODE_LIB_EXPORT InitDefaultstestParamImpl();
void CODE_LIB_EXPORT InitDefaultstestParam();
inline void CODE_LIB_EXPORT InitDefaults() {
  InitDefaultsparam_ParamListEntry_DoNotUse();
  InitDefaultsparam();
  InitDefaultstestParam();
}
}  // namespace protobuf_proto_2fparam_2eproto
namespace MainParam {
class param;
class paramDefaultTypeInternal;
CODE_LIB_EXPORT extern paramDefaultTypeInternal _param_default_instance_;
class param_ParamListEntry_DoNotUse;
class param_ParamListEntry_DoNotUseDefaultTypeInternal;
CODE_LIB_EXPORT extern param_ParamListEntry_DoNotUseDefaultTypeInternal _param_ParamListEntry_DoNotUse_default_instance_;
class testParam;
class testParamDefaultTypeInternal;
CODE_LIB_EXPORT extern testParamDefaultTypeInternal _testParam_default_instance_;
}  // namespace MainParam
namespace MainParam {

// ===================================================================

class param_ParamListEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<param_ParamListEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<param_ParamListEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  param_ParamListEntry_DoNotUse();
  param_ParamListEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const param_ParamListEntry_DoNotUse& other);
  static const param_ParamListEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const param_ParamListEntry_DoNotUse*>(&_param_ParamListEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CODE_LIB_EXPORT param : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MainParam.param) */ {
 public:
  param();
  virtual ~param();

  param(const param& from);

  inline param& operator=(const param& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  param(param&& from) noexcept
    : param() {
    *this = ::std::move(from);
  }

  inline param& operator=(param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const param& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const param* internal_default_instance() {
    return reinterpret_cast<const param*>(
               &_param_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(param* other);
  friend void swap(param& a, param& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline param* New() const PROTOBUF_FINAL { return New(NULL); }

  param* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const param& from);
  void MergeFrom(const param& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(param* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> param_list = 1;
  int param_list_size() const;
  void clear_param_list();
  static const int kParamListFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      param_list() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_param_list();

  // @@protoc_insertion_point(class_scope:MainParam.param)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      param_ParamListEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > param_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fparam_2eproto::InitDefaultsparamImpl();
};
// -------------------------------------------------------------------

class CODE_LIB_EXPORT testParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MainParam.testParam) */ {
 public:
  testParam();
  virtual ~testParam();

  testParam(const testParam& from);

  inline testParam& operator=(const testParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  testParam(testParam&& from) noexcept
    : testParam() {
    *this = ::std::move(from);
  }

  inline testParam& operator=(testParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const testParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const testParam* internal_default_instance() {
    return reinterpret_cast<const testParam*>(
               &_testParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(testParam* other);
  friend void swap(testParam& a, testParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline testParam* New() const PROTOBUF_FINAL { return New(NULL); }

  testParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const testParam& from);
  void MergeFrom(const testParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(testParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 idx = 3;
  int idx_size() const;
  void clear_idx();
  static const int kIdxFieldNumber = 3;
  ::google::protobuf::int32 idx(int index) const;
  void set_idx(int index, ::google::protobuf::int32 value);
  void add_idx(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      idx() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_idx();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MainParam.testParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > idx_;
  mutable int _idx_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fparam_2eproto::InitDefaultstestParamImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// param

// map<string, string> param_list = 1;
inline int param::param_list_size() const {
  return param_list_.size();
}
inline void param::clear_param_list() {
  param_list_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
param::param_list() const {
  // @@protoc_insertion_point(field_map:MainParam.param.param_list)
  return param_list_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
param::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_map:MainParam.param.param_list)
  return param_list_.MutableMap();
}

// -------------------------------------------------------------------

// testParam

// int32 id = 1;
inline void testParam::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 testParam::id() const {
  // @@protoc_insertion_point(field_get:MainParam.testParam.id)
  return id_;
}
inline void testParam::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:MainParam.testParam.id)
}

// string name = 2;
inline void testParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& testParam::name() const {
  // @@protoc_insertion_point(field_get:MainParam.testParam.name)
  return name_.GetNoArena();
}
inline void testParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MainParam.testParam.name)
}
#if LANG_CXX11
inline void testParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MainParam.testParam.name)
}
#endif
inline void testParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MainParam.testParam.name)
}
inline void testParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MainParam.testParam.name)
}
inline ::std::string* testParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MainParam.testParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* testParam::release_name() {
  // @@protoc_insertion_point(field_release:MainParam.testParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void testParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MainParam.testParam.name)
}

// repeated int32 idx = 3;
inline int testParam::idx_size() const {
  return idx_.size();
}
inline void testParam::clear_idx() {
  idx_.Clear();
}
inline ::google::protobuf::int32 testParam::idx(int index) const {
  // @@protoc_insertion_point(field_get:MainParam.testParam.idx)
  return idx_.Get(index);
}
inline void testParam::set_idx(int index, ::google::protobuf::int32 value) {
  idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:MainParam.testParam.idx)
}
inline void testParam::add_idx(::google::protobuf::int32 value) {
  idx_.Add(value);
  // @@protoc_insertion_point(field_add:MainParam.testParam.idx)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
testParam::idx() const {
  // @@protoc_insertion_point(field_list:MainParam.testParam.idx)
  return idx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
testParam::mutable_idx() {
  // @@protoc_insertion_point(field_mutable_list:MainParam.testParam.idx)
  return &idx_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MainParam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fparam_2eproto__INCLUDED
