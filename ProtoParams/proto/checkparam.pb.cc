// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/checkparam.proto

#include "proto/checkparam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Parameters {
class GaussianParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GaussianParam>
      _instance;
} _GaussianParam_default_instance_;
class DOGparamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DOGparam>
      _instance;
} _DOGparam_default_instance_;
class MAXMINparmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MAXMINparm>
      _instance;
} _MAXMINparm_default_instance_;
class EXPVARparamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EXPVARparam>
      _instance;
} _EXPVARparam_default_instance_;
class GeoClassifiyParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoClassifiyParam>
      _instance;
} _GeoClassifiyParam_default_instance_;
class SVMClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SVMClassifyParam_DefectlabelnameEntry_DoNotUse>
      _instance;
} _SVMClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
class SVMClassifyParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SVMClassifyParam>
      _instance;
} _SVMClassifyParam_default_instance_;
class DTreeClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DTreeClassifyParam_DefectlabelnameEntry_DoNotUse>
      _instance;
} _DTreeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
class DTreeClassifyParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DTreeClassifyParam>
      _instance;
} _DTreeClassifyParam_default_instance_;
class CaffeClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaffeClassifyParam_DefectlabelnameEntry_DoNotUse>
      _instance;
} _CaffeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
class CaffeClassifyParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaffeClassifyParam>
      _instance;
} _CaffeClassifyParam_default_instance_;
class BoundSearchParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundSearchParam>
      _instance;
} _BoundSearchParam_default_instance_;
class InspectParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectParam>
      _instance;
} _InspectParam_default_instance_;
class StripParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StripParam>
      _instance;
} _StripParam_default_instance_;
class SheetInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SheetInfo>
      _instance;
} _SheetInfo_default_instance_;
class RunTimeParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunTimeParam>
      _instance;
} _RunTimeParam_default_instance_;
class SystemRectifyParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemRectifyParam>
      _instance;
} _SystemRectifyParam_default_instance_;
}  // namespace Parameters
namespace protobuf_proto_2fcheckparam_2eproto {
void InitDefaultsGaussianParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_GaussianParam_default_instance_;
    new (ptr) ::Parameters::GaussianParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::GaussianParam::InitAsDefaultInstance();
}

void InitDefaultsGaussianParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGaussianParamImpl);
}

void InitDefaultsDOGparamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsGaussianParam();
  {
    void* ptr = &::Parameters::_DOGparam_default_instance_;
    new (ptr) ::Parameters::DOGparam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::DOGparam::InitAsDefaultInstance();
}

void InitDefaultsDOGparam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDOGparamImpl);
}

void InitDefaultsMAXMINparmImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_MAXMINparm_default_instance_;
    new (ptr) ::Parameters::MAXMINparm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::MAXMINparm::InitAsDefaultInstance();
}

void InitDefaultsMAXMINparm() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMAXMINparmImpl);
}

void InitDefaultsEXPVARparamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_EXPVARparam_default_instance_;
    new (ptr) ::Parameters::EXPVARparam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::EXPVARparam::InitAsDefaultInstance();
}

void InitDefaultsEXPVARparam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEXPVARparamImpl);
}

void InitDefaultsGeoClassifiyParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_GeoClassifiyParam_default_instance_;
    new (ptr) ::Parameters::GeoClassifiyParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::GeoClassifiyParam::InitAsDefaultInstance();
}

void InitDefaultsGeoClassifiyParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGeoClassifiyParamImpl);
}

void InitDefaultsSVMClassifyParam_DefectlabelnameEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_SVMClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
    new (ptr) ::Parameters::SVMClassifyParam_DefectlabelnameEntry_DoNotUse();
  }
  ::Parameters::SVMClassifyParam_DefectlabelnameEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSVMClassifyParam_DefectlabelnameEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSVMClassifyParam_DefectlabelnameEntry_DoNotUseImpl);
}

void InitDefaultsSVMClassifyParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsSVMClassifyParam_DefectlabelnameEntry_DoNotUse();
  {
    void* ptr = &::Parameters::_SVMClassifyParam_default_instance_;
    new (ptr) ::Parameters::SVMClassifyParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::SVMClassifyParam::InitAsDefaultInstance();
}

void InitDefaultsSVMClassifyParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSVMClassifyParamImpl);
}

void InitDefaultsDTreeClassifyParam_DefectlabelnameEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_DTreeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
    new (ptr) ::Parameters::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse();
  }
  ::Parameters::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsDTreeClassifyParam_DefectlabelnameEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDTreeClassifyParam_DefectlabelnameEntry_DoNotUseImpl);
}

void InitDefaultsDTreeClassifyParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsDTreeClassifyParam_DefectlabelnameEntry_DoNotUse();
  {
    void* ptr = &::Parameters::_DTreeClassifyParam_default_instance_;
    new (ptr) ::Parameters::DTreeClassifyParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::DTreeClassifyParam::InitAsDefaultInstance();
}

void InitDefaultsDTreeClassifyParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDTreeClassifyParamImpl);
}

void InitDefaultsCaffeClassifyParam_DefectlabelnameEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_CaffeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
    new (ptr) ::Parameters::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse();
  }
  ::Parameters::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsCaffeClassifyParam_DefectlabelnameEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCaffeClassifyParam_DefectlabelnameEntry_DoNotUseImpl);
}

void InitDefaultsCaffeClassifyParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsCaffeClassifyParam_DefectlabelnameEntry_DoNotUse();
  {
    void* ptr = &::Parameters::_CaffeClassifyParam_default_instance_;
    new (ptr) ::Parameters::CaffeClassifyParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::CaffeClassifyParam::InitAsDefaultInstance();
}

void InitDefaultsCaffeClassifyParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCaffeClassifyParamImpl);
}

void InitDefaultsBoundSearchParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_BoundSearchParam_default_instance_;
    new (ptr) ::Parameters::BoundSearchParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::BoundSearchParam::InitAsDefaultInstance();
}

void InitDefaultsBoundSearchParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoundSearchParamImpl);
}

void InitDefaultsInspectParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsBoundSearchParam();
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsDOGparam();
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsEXPVARparam();
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsMAXMINparm();
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsGeoClassifiyParam();
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsSVMClassifyParam();
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsDTreeClassifyParam();
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsCaffeClassifyParam();
  {
    void* ptr = &::Parameters::_InspectParam_default_instance_;
    new (ptr) ::Parameters::InspectParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::InspectParam::InitAsDefaultInstance();
}

void InitDefaultsInspectParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInspectParamImpl);
}

void InitDefaultsStripParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_StripParam_default_instance_;
    new (ptr) ::Parameters::StripParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::StripParam::InitAsDefaultInstance();
}

void InitDefaultsStripParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStripParamImpl);
}

void InitDefaultsSheetInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_proto_2fcheckparam_2eproto::InitDefaultsStripParam();
  {
    void* ptr = &::Parameters::_SheetInfo_default_instance_;
    new (ptr) ::Parameters::SheetInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::SheetInfo::InitAsDefaultInstance();
}

void InitDefaultsSheetInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSheetInfoImpl);
}

void InitDefaultsRunTimeParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_RunTimeParam_default_instance_;
    new (ptr) ::Parameters::RunTimeParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::RunTimeParam::InitAsDefaultInstance();
}

void InitDefaultsRunTimeParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRunTimeParamImpl);
}

void InitDefaultsSystemRectifyParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Parameters::_SystemRectifyParam_default_instance_;
    new (ptr) ::Parameters::SystemRectifyParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Parameters::SystemRectifyParam::InitAsDefaultInstance();
}

void InitDefaultsSystemRectifyParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSystemRectifyParamImpl);
}

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GaussianParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GaussianParam, sizex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GaussianParam, sizey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GaussianParam, sigma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GaussianParam, kernelname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DOGparam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DOGparam, refkernel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DOGparam, thresholddark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DOGparam, thresholdlight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::MAXMINparm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::MAXMINparm, threshigh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::MAXMINparm, threshlow_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::EXPVARparam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::EXPVARparam, sigmatime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, minheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, maxheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, minwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, maxwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, mindiff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, maxdiff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, minarea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, maxarea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, defectname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::GeoClassifiyParam, iconid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SVMClassifyParam_DefectlabelnameEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SVMClassifyParam_DefectlabelnameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SVMClassifyParam_DefectlabelnameEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SVMClassifyParam_DefectlabelnameEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SVMClassifyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SVMClassifyParam, modelpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SVMClassifyParam, defectlabelname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DTreeClassifyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DTreeClassifyParam, modelpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::DTreeClassifyParam, defectlabelname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::CaffeClassifyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::CaffeClassifyParam, modelpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::CaffeClassifyParam, defectlabelname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::BoundSearchParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::BoundSearchParam, leftrange1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::BoundSearchParam, leftrange2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::BoundSearchParam, rightrange1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::BoundSearchParam, rightrange2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, dstvaluefrd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, dstvaluebgd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, boundsearchlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, checktype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, dogparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, expvarparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, maxminparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, blobthr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, classificcationtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, geoparamlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, svmparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, dtreeparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, caffeparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, exposuretime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, savepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, paramname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::InspectParam, layertype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::StripParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::StripParam, leftoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::StripParam, stripwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::StripParam, allwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::StripParam, stripcount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, machinenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, imagemodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, prodctname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, ordernumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, batchnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, inspectparamname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, stripparam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, offsetboundarytozero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, startlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, islefttoright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, boundoffsetleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, boundoffsetright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SheetInfo, productthickness_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::RunTimeParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::RunTimeParam, threadnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::RunTimeParam, freamwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::RunTimeParam, freamheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::RunTimeParam, dowmsample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::RunTimeParam, splitsizex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::RunTimeParam, splitsizey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::RunTimeParam, isgpu_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SystemRectifyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SystemRectifyParam, xphysicresolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SystemRectifyParam, yphysicresolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SystemRectifyParam, lengthperfream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SystemRectifyParam, rectifyparamfilepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Parameters::SystemRectifyParam, offsety_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Parameters::GaussianParam)},
  { 9, -1, sizeof(::Parameters::DOGparam)},
  { 17, -1, sizeof(::Parameters::MAXMINparm)},
  { 24, -1, sizeof(::Parameters::EXPVARparam)},
  { 30, -1, sizeof(::Parameters::GeoClassifiyParam)},
  { 45, 52, sizeof(::Parameters::SVMClassifyParam_DefectlabelnameEntry_DoNotUse)},
  { 54, -1, sizeof(::Parameters::SVMClassifyParam)},
  { 61, 68, sizeof(::Parameters::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse)},
  { 70, -1, sizeof(::Parameters::DTreeClassifyParam)},
  { 77, 84, sizeof(::Parameters::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse)},
  { 86, -1, sizeof(::Parameters::CaffeClassifyParam)},
  { 93, -1, sizeof(::Parameters::BoundSearchParam)},
  { 102, -1, sizeof(::Parameters::InspectParam)},
  { 125, -1, sizeof(::Parameters::StripParam)},
  { 134, -1, sizeof(::Parameters::SheetInfo)},
  { 154, -1, sizeof(::Parameters::RunTimeParam)},
  { 166, -1, sizeof(::Parameters::SystemRectifyParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_GaussianParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_DOGparam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_MAXMINparm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_EXPVARparam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_GeoClassifiyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_SVMClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_SVMClassifyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_DTreeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_DTreeClassifyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_CaffeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_CaffeClassifyParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_BoundSearchParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_InspectParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_StripParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_SheetInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_RunTimeParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Parameters::_SystemRectifyParam_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/checkparam.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026proto/checkparam.proto\022\nParameters\"P\n\r"
      "GaussianParam\022\r\n\005sizex\030\001 \001(\005\022\r\n\005sizey\030\002 "
      "\001(\005\022\r\n\005sigma\030\003 \001(\002\022\022\n\nKernelName\030\004 \001(\t\"g"
      "\n\010DOGparam\022,\n\trefKernel\030\002 \001(\0132\031.Paramete"
      "rs.GaussianParam\022\025\n\rthresholddark\030\003 \001(\005\022"
      "\026\n\016thresholdlight\030\004 \001(\005\"2\n\nMAXMINparm\022\021\n"
      "\tthreshigh\030\001 \001(\005\022\021\n\tthreshlow\030\002 \001(\005\" \n\013E"
      "XPVARparam\022\021\n\tsigmatime\030\001 \001(\002\"\305\001\n\021GeoCla"
      "ssifiyParam\022\021\n\tminheight\030\001 \001(\002\022\021\n\tmaxhei"
      "ght\030\002 \001(\002\022\020\n\010minwidth\030\003 \001(\002\022\020\n\010maxwidth\030"
      "\004 \001(\002\022\017\n\007mindiff\030\005 \001(\021\022\017\n\007maxdiff\030\006 \001(\021\022"
      "\017\n\007minarea\030\007 \001(\002\022\017\n\007maxarea\030\010 \001(\002\022\022\n\ndef"
      "ectname\030\t \001(\t\022\016\n\006iconid\030\n \001(\005\"\251\001\n\020SVMCla"
      "ssifyParam\022\021\n\tmodelPath\030\001 \001(\t\022J\n\017defectl"
      "abelname\030\002 \003(\01321.Parameters.SVMClassifyP"
      "aram.DefectlabelnameEntry\0326\n\024Defectlabel"
      "nameEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028"
      "\001\"\255\001\n\022DTreeClassifyParam\022\021\n\tmodelPath\030\001 "
      "\001(\t\022L\n\017defectlabelname\030\002 \003(\01323.Parameter"
      "s.DTreeClassifyParam.DefectlabelnameEntr"
      "y\0326\n\024DefectlabelnameEntry\022\013\n\003key\030\001 \001(\005\022\r"
      "\n\005value\030\002 \001(\t:\0028\001\"\255\001\n\022CaffeClassifyParam"
      "\022\021\n\tmodelPath\030\001 \001(\t\022L\n\017defectlabelname\030\002"
      " \003(\01323.Parameters.CaffeClassifyParam.Def"
      "ectlabelnameEntry\0326\n\024DefectlabelnameEntr"
      "y\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\"d\n\020Bou"
      "ndSearchParam\022\022\n\nleftRange1\030\001 \001(\002\022\022\n\nlef"
      "tRange2\030\002 \001(\002\022\023\n\013rightRange1\030\003 \001(\002\022\023\n\013ri"
      "ghtRange2\030\004 \001(\002\"\234\006\n\014InspectParam\022\023\n\013dstv"
      "aluefrd\030\001 \001(\005\022\023\n\013dstvaluebgd\030\002 \001(\005\0225\n\017bo"
      "undsearchlist\030\003 \003(\0132\034.Parameters.BoundSe"
      "archParam\0225\n\tchecktype\030\004 \001(\0162\".Parameter"
      "s.InspectParam.CheckType\022&\n\010dogParam\030\005 \001"
      "(\0132\024.Parameters.DOGparam\022,\n\013expvarParam\030"
      "\006 \001(\0132\027.Parameters.EXPVARparam\022+\n\013maxmin"
      "Param\030\007 \001(\0132\026.Parameters.MAXMINparm\022\017\n\007b"
      "lobThr\030\010 \001(\002\022G\n\023classificcationtype\030\t \001("
      "\0162*.Parameters.InspectParam.Classifictio"
      "nType\0223\n\014geoParamlist\030\n \003(\0132\035.Parameters"
      ".GeoClassifiyParam\022.\n\010svmParam\030\013 \001(\0132\034.P"
      "arameters.SVMClassifyParam\0222\n\nDTreeParam"
      "\030\014 \001(\0132\036.Parameters.DTreeClassifyParam\0222"
      "\n\nCaffeParam\030\r \001(\0132\036.Parameters.CaffeCla"
      "ssifyParam\022\024\n\014exposureTime\030\016 \001(\002\022\014\n\004gain"
      "\030\017 \001(\002\022\020\n\010savepath\030\020 \001(\t\022\021\n\tparamname\030\021 "
      "\001(\t\022\021\n\tlayerType\030\022 \001(\005\",\n\tCheckType\022\007\n\003D"
      "OG\020\000\022\n\n\006MAXMIN\020\001\022\n\n\006EXPVAR\020\002\"@\n\021Classifi"
      "ctionType\022\014\n\010Geometry\020\000\022\007\n\003SVM\020\001\022\t\n\005DTRE"
      "E\020\002\022\t\n\005CAFFE\020\003\"Z\n\nStripParam\022\022\n\nleftoffs"
      "et\030\001 \001(\002\022\022\n\nstripwidth\030\002 \003(\002\022\020\n\010allwidth"
      "\030\003 \001(\002\022\022\n\nstripcount\030\004 \001(\005\"\363\002\n\tSheetInfo"
      "\022\020\n\010username\030\001 \001(\t\022\025\n\rmachinenumber\030\002 \001("
      "\t\022\022\n\nimageModel\030\003 \001(\t\022\022\n\nprodctname\030\004 \001("
      "\t\022\023\n\013ordernumber\030\005 \001(\t\022\023\n\013batchnumber\030\006 "
      "\001(\t\022\030\n\020inspectparamname\030\007 \001(\t\022\016\n\006remark\030"
      "\t \001(\t\022*\n\nstripparam\030\010 \001(\0132\026.Parameters.S"
      "tripParam\022\034\n\024offsetBoundaryToZero\030\n \001(\002\022"
      "\023\n\013startLength\030\013 \001(\002\022\025\n\risLeftToRight\030\014 "
      "\001(\010\022\027\n\017boundOffsetLeft\030\r \001(\002\022\030\n\020boundOff"
      "setRight\030\016 \001(\002\022\030\n\020productThickness\030\017 \001(\002"
      "\"\225\001\n\014RunTimeParam\022\021\n\tthreadnum\030\001 \001(\005\022\022\n\n"
      "freamwidth\030\002 \001(\005\022\023\n\013freamheight\030\003 \001(\005\022\022\n"
      "\ndowmsample\030\004 \001(\005\022\022\n\nsplitsizex\030\005 \001(\005\022\022\n"
      "\nsplitsizey\030\006 \001(\005\022\r\n\005isgpu\030\007 \001(\010\"\221\001\n\022Sys"
      "temRectifyParam\022\031\n\021xphysicresolution\030\001 \001"
      "(\002\022\031\n\021yphysicresolution\030\003 \001(\002\022\026\n\016lengthP"
      "erFream\030\002 \001(\002\022\034\n\024rectifyparamfilepath\030\004 "
      "\001(\t\022\017\n\007offsetY\030\005 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/checkparam.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fcheckparam_2eproto
namespace Parameters {
const ::google::protobuf::EnumDescriptor* InspectParam_CheckType_descriptor() {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fcheckparam_2eproto::file_level_enum_descriptors[0];
}
bool InspectParam_CheckType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InspectParam_CheckType InspectParam::DOG;
const InspectParam_CheckType InspectParam::MAXMIN;
const InspectParam_CheckType InspectParam::EXPVAR;
const InspectParam_CheckType InspectParam::CheckType_MIN;
const InspectParam_CheckType InspectParam::CheckType_MAX;
const int InspectParam::CheckType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InspectParam_ClassifictionType_descriptor() {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fcheckparam_2eproto::file_level_enum_descriptors[1];
}
bool InspectParam_ClassifictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InspectParam_ClassifictionType InspectParam::Geometry;
const InspectParam_ClassifictionType InspectParam::SVM;
const InspectParam_ClassifictionType InspectParam::DTREE;
const InspectParam_ClassifictionType InspectParam::CAFFE;
const InspectParam_ClassifictionType InspectParam::ClassifictionType_MIN;
const InspectParam_ClassifictionType InspectParam::ClassifictionType_MAX;
const int InspectParam::ClassifictionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GaussianParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GaussianParam::kSizexFieldNumber;
const int GaussianParam::kSizeyFieldNumber;
const int GaussianParam::kSigmaFieldNumber;
const int GaussianParam::kKernelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GaussianParam::GaussianParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsGaussianParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.GaussianParam)
}
GaussianParam::GaussianParam(const GaussianParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kernelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kernelname().size() > 0) {
    kernelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kernelname_);
  }
  ::memcpy(&sizex_, &from.sizex_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&sizex_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:Parameters.GaussianParam)
}

void GaussianParam::SharedCtor() {
  kernelname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sizex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&sizex_)) + sizeof(sigma_));
  _cached_size_ = 0;
}

GaussianParam::~GaussianParam() {
  // @@protoc_insertion_point(destructor:Parameters.GaussianParam)
  SharedDtor();
}

void GaussianParam::SharedDtor() {
  kernelname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GaussianParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaussianParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GaussianParam& GaussianParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsGaussianParam();
  return *internal_default_instance();
}

GaussianParam* GaussianParam::New(::google::protobuf::Arena* arena) const {
  GaussianParam* n = new GaussianParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GaussianParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.GaussianParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kernelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sizex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&sizex_)) + sizeof(sigma_));
  _internal_metadata_.Clear();
}

bool GaussianParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.GaussianParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sizex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sizex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sizey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sizey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sigma = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string KernelName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernelname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kernelname().data(), static_cast<int>(this->kernelname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.GaussianParam.KernelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.GaussianParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.GaussianParam)
  return false;
#undef DO_
}

void GaussianParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.GaussianParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sizex = 1;
  if (this->sizex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sizex(), output);
  }

  // int32 sizey = 2;
  if (this->sizey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sizey(), output);
  }

  // float sigma = 3;
  if (this->sigma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sigma(), output);
  }

  // string KernelName = 4;
  if (this->kernelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kernelname().data(), static_cast<int>(this->kernelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.GaussianParam.KernelName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->kernelname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.GaussianParam)
}

::google::protobuf::uint8* GaussianParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.GaussianParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sizex = 1;
  if (this->sizex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sizex(), target);
  }

  // int32 sizey = 2;
  if (this->sizey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sizey(), target);
  }

  // float sigma = 3;
  if (this->sigma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sigma(), target);
  }

  // string KernelName = 4;
  if (this->kernelname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kernelname().data(), static_cast<int>(this->kernelname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.GaussianParam.KernelName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->kernelname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.GaussianParam)
  return target;
}

size_t GaussianParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.GaussianParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string KernelName = 4;
  if (this->kernelname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kernelname());
  }

  // int32 sizex = 1;
  if (this->sizex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sizex());
  }

  // int32 sizey = 2;
  if (this->sizey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sizey());
  }

  // float sigma = 3;
  if (this->sigma() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaussianParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.GaussianParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GaussianParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GaussianParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.GaussianParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.GaussianParam)
    MergeFrom(*source);
  }
}

void GaussianParam::MergeFrom(const GaussianParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.GaussianParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kernelname().size() > 0) {

    kernelname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kernelname_);
  }
  if (from.sizex() != 0) {
    set_sizex(from.sizex());
  }
  if (from.sizey() != 0) {
    set_sizey(from.sizey());
  }
  if (from.sigma() != 0) {
    set_sigma(from.sigma());
  }
}

void GaussianParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.GaussianParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaussianParam::CopyFrom(const GaussianParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.GaussianParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianParam::IsInitialized() const {
  return true;
}

void GaussianParam::Swap(GaussianParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GaussianParam::InternalSwap(GaussianParam* other) {
  using std::swap;
  kernelname_.Swap(&other->kernelname_);
  swap(sizex_, other->sizex_);
  swap(sizey_, other->sizey_);
  swap(sigma_, other->sigma_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GaussianParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DOGparam::InitAsDefaultInstance() {
  ::Parameters::_DOGparam_default_instance_._instance.get_mutable()->refkernel_ = const_cast< ::Parameters::GaussianParam*>(
      ::Parameters::GaussianParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DOGparam::kRefKernelFieldNumber;
const int DOGparam::kThresholddarkFieldNumber;
const int DOGparam::kThresholdlightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DOGparam::DOGparam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsDOGparam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.DOGparam)
}
DOGparam::DOGparam(const DOGparam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_refkernel()) {
    refkernel_ = new ::Parameters::GaussianParam(*from.refkernel_);
  } else {
    refkernel_ = NULL;
  }
  ::memcpy(&thresholddark_, &from.thresholddark_,
    static_cast<size_t>(reinterpret_cast<char*>(&thresholdlight_) -
    reinterpret_cast<char*>(&thresholddark_)) + sizeof(thresholdlight_));
  // @@protoc_insertion_point(copy_constructor:Parameters.DOGparam)
}

void DOGparam::SharedCtor() {
  ::memset(&refkernel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thresholdlight_) -
      reinterpret_cast<char*>(&refkernel_)) + sizeof(thresholdlight_));
  _cached_size_ = 0;
}

DOGparam::~DOGparam() {
  // @@protoc_insertion_point(destructor:Parameters.DOGparam)
  SharedDtor();
}

void DOGparam::SharedDtor() {
  if (this != internal_default_instance()) delete refkernel_;
}

void DOGparam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DOGparam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DOGparam& DOGparam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsDOGparam();
  return *internal_default_instance();
}

DOGparam* DOGparam::New(::google::protobuf::Arena* arena) const {
  DOGparam* n = new DOGparam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DOGparam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.DOGparam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && refkernel_ != NULL) {
    delete refkernel_;
  }
  refkernel_ = NULL;
  ::memset(&thresholddark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thresholdlight_) -
      reinterpret_cast<char*>(&thresholddark_)) + sizeof(thresholdlight_));
  _internal_metadata_.Clear();
}

bool DOGparam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.DOGparam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Parameters.GaussianParam refKernel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refkernel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thresholddark = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thresholddark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 thresholdlight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thresholdlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.DOGparam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.DOGparam)
  return false;
#undef DO_
}

void DOGparam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.DOGparam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Parameters.GaussianParam refKernel = 2;
  if (this->has_refkernel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->refkernel_, output);
  }

  // int32 thresholddark = 3;
  if (this->thresholddark() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->thresholddark(), output);
  }

  // int32 thresholdlight = 4;
  if (this->thresholdlight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->thresholdlight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.DOGparam)
}

::google::protobuf::uint8* DOGparam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.DOGparam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Parameters.GaussianParam refKernel = 2;
  if (this->has_refkernel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->refkernel_, deterministic, target);
  }

  // int32 thresholddark = 3;
  if (this->thresholddark() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->thresholddark(), target);
  }

  // int32 thresholdlight = 4;
  if (this->thresholdlight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->thresholdlight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.DOGparam)
  return target;
}

size_t DOGparam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.DOGparam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Parameters.GaussianParam refKernel = 2;
  if (this->has_refkernel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->refkernel_);
  }

  // int32 thresholddark = 3;
  if (this->thresholddark() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thresholddark());
  }

  // int32 thresholdlight = 4;
  if (this->thresholdlight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->thresholdlight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DOGparam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.DOGparam)
  GOOGLE_DCHECK_NE(&from, this);
  const DOGparam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DOGparam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.DOGparam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.DOGparam)
    MergeFrom(*source);
  }
}

void DOGparam::MergeFrom(const DOGparam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.DOGparam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_refkernel()) {
    mutable_refkernel()->::Parameters::GaussianParam::MergeFrom(from.refkernel());
  }
  if (from.thresholddark() != 0) {
    set_thresholddark(from.thresholddark());
  }
  if (from.thresholdlight() != 0) {
    set_thresholdlight(from.thresholdlight());
  }
}

void DOGparam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.DOGparam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DOGparam::CopyFrom(const DOGparam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.DOGparam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DOGparam::IsInitialized() const {
  return true;
}

void DOGparam::Swap(DOGparam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DOGparam::InternalSwap(DOGparam* other) {
  using std::swap;
  swap(refkernel_, other->refkernel_);
  swap(thresholddark_, other->thresholddark_);
  swap(thresholdlight_, other->thresholdlight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DOGparam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MAXMINparm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MAXMINparm::kThreshighFieldNumber;
const int MAXMINparm::kThreshlowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MAXMINparm::MAXMINparm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsMAXMINparm();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.MAXMINparm)
}
MAXMINparm::MAXMINparm(const MAXMINparm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threshigh_, &from.threshigh_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshlow_) -
    reinterpret_cast<char*>(&threshigh_)) + sizeof(threshlow_));
  // @@protoc_insertion_point(copy_constructor:Parameters.MAXMINparm)
}

void MAXMINparm::SharedCtor() {
  ::memset(&threshigh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshlow_) -
      reinterpret_cast<char*>(&threshigh_)) + sizeof(threshlow_));
  _cached_size_ = 0;
}

MAXMINparm::~MAXMINparm() {
  // @@protoc_insertion_point(destructor:Parameters.MAXMINparm)
  SharedDtor();
}

void MAXMINparm::SharedDtor() {
}

void MAXMINparm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MAXMINparm::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MAXMINparm& MAXMINparm::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsMAXMINparm();
  return *internal_default_instance();
}

MAXMINparm* MAXMINparm::New(::google::protobuf::Arena* arena) const {
  MAXMINparm* n = new MAXMINparm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MAXMINparm::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.MAXMINparm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&threshigh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshlow_) -
      reinterpret_cast<char*>(&threshigh_)) + sizeof(threshlow_));
  _internal_metadata_.Clear();
}

bool MAXMINparm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.MAXMINparm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 threshigh = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 threshlow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshlow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.MAXMINparm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.MAXMINparm)
  return false;
#undef DO_
}

void MAXMINparm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.MAXMINparm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threshigh = 1;
  if (this->threshigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->threshigh(), output);
  }

  // int32 threshlow = 2;
  if (this->threshlow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threshlow(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.MAXMINparm)
}

::google::protobuf::uint8* MAXMINparm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.MAXMINparm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threshigh = 1;
  if (this->threshigh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->threshigh(), target);
  }

  // int32 threshlow = 2;
  if (this->threshlow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threshlow(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.MAXMINparm)
  return target;
}

size_t MAXMINparm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.MAXMINparm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 threshigh = 1;
  if (this->threshigh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshigh());
  }

  // int32 threshlow = 2;
  if (this->threshlow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshlow());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MAXMINparm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.MAXMINparm)
  GOOGLE_DCHECK_NE(&from, this);
  const MAXMINparm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MAXMINparm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.MAXMINparm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.MAXMINparm)
    MergeFrom(*source);
  }
}

void MAXMINparm::MergeFrom(const MAXMINparm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.MAXMINparm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.threshigh() != 0) {
    set_threshigh(from.threshigh());
  }
  if (from.threshlow() != 0) {
    set_threshlow(from.threshlow());
  }
}

void MAXMINparm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.MAXMINparm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MAXMINparm::CopyFrom(const MAXMINparm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.MAXMINparm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAXMINparm::IsInitialized() const {
  return true;
}

void MAXMINparm::Swap(MAXMINparm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MAXMINparm::InternalSwap(MAXMINparm* other) {
  using std::swap;
  swap(threshigh_, other->threshigh_);
  swap(threshlow_, other->threshlow_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MAXMINparm::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EXPVARparam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EXPVARparam::kSigmatimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EXPVARparam::EXPVARparam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsEXPVARparam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.EXPVARparam)
}
EXPVARparam::EXPVARparam(const EXPVARparam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sigmatime_ = from.sigmatime_;
  // @@protoc_insertion_point(copy_constructor:Parameters.EXPVARparam)
}

void EXPVARparam::SharedCtor() {
  sigmatime_ = 0;
  _cached_size_ = 0;
}

EXPVARparam::~EXPVARparam() {
  // @@protoc_insertion_point(destructor:Parameters.EXPVARparam)
  SharedDtor();
}

void EXPVARparam::SharedDtor() {
}

void EXPVARparam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EXPVARparam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EXPVARparam& EXPVARparam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsEXPVARparam();
  return *internal_default_instance();
}

EXPVARparam* EXPVARparam::New(::google::protobuf::Arena* arena) const {
  EXPVARparam* n = new EXPVARparam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EXPVARparam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.EXPVARparam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sigmatime_ = 0;
  _internal_metadata_.Clear();
}

bool EXPVARparam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.EXPVARparam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float sigmatime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmatime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.EXPVARparam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.EXPVARparam)
  return false;
#undef DO_
}

void EXPVARparam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.EXPVARparam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float sigmatime = 1;
  if (this->sigmatime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sigmatime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.EXPVARparam)
}

::google::protobuf::uint8* EXPVARparam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.EXPVARparam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float sigmatime = 1;
  if (this->sigmatime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->sigmatime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.EXPVARparam)
  return target;
}

size_t EXPVARparam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.EXPVARparam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float sigmatime = 1;
  if (this->sigmatime() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EXPVARparam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.EXPVARparam)
  GOOGLE_DCHECK_NE(&from, this);
  const EXPVARparam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EXPVARparam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.EXPVARparam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.EXPVARparam)
    MergeFrom(*source);
  }
}

void EXPVARparam::MergeFrom(const EXPVARparam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.EXPVARparam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sigmatime() != 0) {
    set_sigmatime(from.sigmatime());
  }
}

void EXPVARparam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.EXPVARparam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EXPVARparam::CopyFrom(const EXPVARparam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.EXPVARparam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EXPVARparam::IsInitialized() const {
  return true;
}

void EXPVARparam::Swap(EXPVARparam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EXPVARparam::InternalSwap(EXPVARparam* other) {
  using std::swap;
  swap(sigmatime_, other->sigmatime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EXPVARparam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeoClassifiyParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoClassifiyParam::kMinheightFieldNumber;
const int GeoClassifiyParam::kMaxheightFieldNumber;
const int GeoClassifiyParam::kMinwidthFieldNumber;
const int GeoClassifiyParam::kMaxwidthFieldNumber;
const int GeoClassifiyParam::kMindiffFieldNumber;
const int GeoClassifiyParam::kMaxdiffFieldNumber;
const int GeoClassifiyParam::kMinareaFieldNumber;
const int GeoClassifiyParam::kMaxareaFieldNumber;
const int GeoClassifiyParam::kDefectnameFieldNumber;
const int GeoClassifiyParam::kIconidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoClassifiyParam::GeoClassifiyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsGeoClassifiyParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.GeoClassifiyParam)
}
GeoClassifiyParam::GeoClassifiyParam(const GeoClassifiyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  defectname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.defectname().size() > 0) {
    defectname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defectname_);
  }
  ::memcpy(&minheight_, &from.minheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&iconid_) -
    reinterpret_cast<char*>(&minheight_)) + sizeof(iconid_));
  // @@protoc_insertion_point(copy_constructor:Parameters.GeoClassifiyParam)
}

void GeoClassifiyParam::SharedCtor() {
  defectname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&minheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iconid_) -
      reinterpret_cast<char*>(&minheight_)) + sizeof(iconid_));
  _cached_size_ = 0;
}

GeoClassifiyParam::~GeoClassifiyParam() {
  // @@protoc_insertion_point(destructor:Parameters.GeoClassifiyParam)
  SharedDtor();
}

void GeoClassifiyParam::SharedDtor() {
  defectname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeoClassifiyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoClassifiyParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoClassifiyParam& GeoClassifiyParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsGeoClassifiyParam();
  return *internal_default_instance();
}

GeoClassifiyParam* GeoClassifiyParam::New(::google::protobuf::Arena* arena) const {
  GeoClassifiyParam* n = new GeoClassifiyParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoClassifiyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.GeoClassifiyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defectname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&minheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iconid_) -
      reinterpret_cast<char*>(&minheight_)) + sizeof(iconid_));
  _internal_metadata_.Clear();
}

bool GeoClassifiyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.GeoClassifiyParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float minheight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxheight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float minwidth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxwidth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 mindiff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mindiff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 maxdiff = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &maxdiff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float minarea = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float maxarea = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string defectname = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defectname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->defectname().data(), static_cast<int>(this->defectname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.GeoClassifiyParam.defectname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iconid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.GeoClassifiyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.GeoClassifiyParam)
  return false;
#undef DO_
}

void GeoClassifiyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.GeoClassifiyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float minheight = 1;
  if (this->minheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->minheight(), output);
  }

  // float maxheight = 2;
  if (this->maxheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxheight(), output);
  }

  // float minwidth = 3;
  if (this->minwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minwidth(), output);
  }

  // float maxwidth = 4;
  if (this->maxwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxwidth(), output);
  }

  // sint32 mindiff = 5;
  if (this->mindiff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->mindiff(), output);
  }

  // sint32 maxdiff = 6;
  if (this->maxdiff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->maxdiff(), output);
  }

  // float minarea = 7;
  if (this->minarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minarea(), output);
  }

  // float maxarea = 8;
  if (this->maxarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxarea(), output);
  }

  // string defectname = 9;
  if (this->defectname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->defectname().data(), static_cast<int>(this->defectname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.GeoClassifiyParam.defectname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->defectname(), output);
  }

  // int32 iconid = 10;
  if (this->iconid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->iconid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.GeoClassifiyParam)
}

::google::protobuf::uint8* GeoClassifiyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.GeoClassifiyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float minheight = 1;
  if (this->minheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->minheight(), target);
  }

  // float maxheight = 2;
  if (this->maxheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxheight(), target);
  }

  // float minwidth = 3;
  if (this->minwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minwidth(), target);
  }

  // float maxwidth = 4;
  if (this->maxwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxwidth(), target);
  }

  // sint32 mindiff = 5;
  if (this->mindiff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->mindiff(), target);
  }

  // sint32 maxdiff = 6;
  if (this->maxdiff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->maxdiff(), target);
  }

  // float minarea = 7;
  if (this->minarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minarea(), target);
  }

  // float maxarea = 8;
  if (this->maxarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxarea(), target);
  }

  // string defectname = 9;
  if (this->defectname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->defectname().data(), static_cast<int>(this->defectname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.GeoClassifiyParam.defectname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->defectname(), target);
  }

  // int32 iconid = 10;
  if (this->iconid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->iconid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.GeoClassifiyParam)
  return target;
}

size_t GeoClassifiyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.GeoClassifiyParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string defectname = 9;
  if (this->defectname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->defectname());
  }

  // float minheight = 1;
  if (this->minheight() != 0) {
    total_size += 1 + 4;
  }

  // float maxheight = 2;
  if (this->maxheight() != 0) {
    total_size += 1 + 4;
  }

  // float minwidth = 3;
  if (this->minwidth() != 0) {
    total_size += 1 + 4;
  }

  // float maxwidth = 4;
  if (this->maxwidth() != 0) {
    total_size += 1 + 4;
  }

  // sint32 mindiff = 5;
  if (this->mindiff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->mindiff());
  }

  // sint32 maxdiff = 6;
  if (this->maxdiff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->maxdiff());
  }

  // float minarea = 7;
  if (this->minarea() != 0) {
    total_size += 1 + 4;
  }

  // float maxarea = 8;
  if (this->maxarea() != 0) {
    total_size += 1 + 4;
  }

  // int32 iconid = 10;
  if (this->iconid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iconid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoClassifiyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.GeoClassifiyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoClassifiyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoClassifiyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.GeoClassifiyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.GeoClassifiyParam)
    MergeFrom(*source);
  }
}

void GeoClassifiyParam::MergeFrom(const GeoClassifiyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.GeoClassifiyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.defectname().size() > 0) {

    defectname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defectname_);
  }
  if (from.minheight() != 0) {
    set_minheight(from.minheight());
  }
  if (from.maxheight() != 0) {
    set_maxheight(from.maxheight());
  }
  if (from.minwidth() != 0) {
    set_minwidth(from.minwidth());
  }
  if (from.maxwidth() != 0) {
    set_maxwidth(from.maxwidth());
  }
  if (from.mindiff() != 0) {
    set_mindiff(from.mindiff());
  }
  if (from.maxdiff() != 0) {
    set_maxdiff(from.maxdiff());
  }
  if (from.minarea() != 0) {
    set_minarea(from.minarea());
  }
  if (from.maxarea() != 0) {
    set_maxarea(from.maxarea());
  }
  if (from.iconid() != 0) {
    set_iconid(from.iconid());
  }
}

void GeoClassifiyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.GeoClassifiyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoClassifiyParam::CopyFrom(const GeoClassifiyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.GeoClassifiyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoClassifiyParam::IsInitialized() const {
  return true;
}

void GeoClassifiyParam::Swap(GeoClassifiyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoClassifiyParam::InternalSwap(GeoClassifiyParam* other) {
  using std::swap;
  defectname_.Swap(&other->defectname_);
  swap(minheight_, other->minheight_);
  swap(maxheight_, other->maxheight_);
  swap(minwidth_, other->minwidth_);
  swap(maxwidth_, other->maxwidth_);
  swap(mindiff_, other->mindiff_);
  swap(maxdiff_, other->maxdiff_);
  swap(minarea_, other->minarea_);
  swap(maxarea_, other->maxarea_);
  swap(iconid_, other->iconid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoClassifiyParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SVMClassifyParam_DefectlabelnameEntry_DoNotUse::SVMClassifyParam_DefectlabelnameEntry_DoNotUse() {}
SVMClassifyParam_DefectlabelnameEntry_DoNotUse::SVMClassifyParam_DefectlabelnameEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SVMClassifyParam_DefectlabelnameEntry_DoNotUse::MergeFrom(const SVMClassifyParam_DefectlabelnameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SVMClassifyParam_DefectlabelnameEntry_DoNotUse::GetMetadata() const {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[5];
}
void SVMClassifyParam_DefectlabelnameEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SVMClassifyParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SVMClassifyParam::kModelPathFieldNumber;
const int SVMClassifyParam::kDefectlabelnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SVMClassifyParam::SVMClassifyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSVMClassifyParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.SVMClassifyParam)
}
SVMClassifyParam::SVMClassifyParam(const SVMClassifyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  defectlabelname_.MergeFrom(from.defectlabelname_);
  modelpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modelpath().size() > 0) {
    modelpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelpath_);
  }
  // @@protoc_insertion_point(copy_constructor:Parameters.SVMClassifyParam)
}

void SVMClassifyParam::SharedCtor() {
  modelpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SVMClassifyParam::~SVMClassifyParam() {
  // @@protoc_insertion_point(destructor:Parameters.SVMClassifyParam)
  SharedDtor();
}

void SVMClassifyParam::SharedDtor() {
  modelpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SVMClassifyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SVMClassifyParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SVMClassifyParam& SVMClassifyParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSVMClassifyParam();
  return *internal_default_instance();
}

SVMClassifyParam* SVMClassifyParam::New(::google::protobuf::Arena* arena) const {
  SVMClassifyParam* n = new SVMClassifyParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SVMClassifyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.SVMClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defectlabelname_.Clear();
  modelpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SVMClassifyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.SVMClassifyParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string modelPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modelpath().data(), static_cast<int>(this->modelpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SVMClassifyParam.modelPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, string> defectlabelname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          SVMClassifyParam_DefectlabelnameEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SVMClassifyParam_DefectlabelnameEntry_DoNotUse,
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&defectlabelname_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SVMClassifyParam.DefectlabelnameEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.SVMClassifyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.SVMClassifyParam)
  return false;
#undef DO_
}

void SVMClassifyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.SVMClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelpath().data(), static_cast<int>(this->modelpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SVMClassifyParam.modelPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->modelpath(), output);
  }

  // map<int32, string> defectlabelname = 2;
  if (!this->defectlabelname().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Parameters.SVMClassifyParam.DefectlabelnameEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->defectlabelname().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->defectlabelname().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SVMClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<SVMClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.SVMClassifyParam)
}

::google::protobuf::uint8* SVMClassifyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.SVMClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelpath().data(), static_cast<int>(this->modelpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SVMClassifyParam.modelPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modelpath(), target);
  }

  // map<int32, string> defectlabelname = 2;
  if (!this->defectlabelname().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Parameters.SVMClassifyParam.DefectlabelnameEntry.value");
      }
    };

    if (deterministic &&
        this->defectlabelname().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->defectlabelname().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SVMClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<SVMClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.SVMClassifyParam)
  return target;
}

size_t SVMClassifyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.SVMClassifyParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, string> defectlabelname = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->defectlabelname_size());
  {
    ::google::protobuf::scoped_ptr<SVMClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->defectlabelname().begin();
        it != this->defectlabelname().end(); ++it) {
      entry.reset(defectlabelname_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modelpath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SVMClassifyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.SVMClassifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SVMClassifyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SVMClassifyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.SVMClassifyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.SVMClassifyParam)
    MergeFrom(*source);
  }
}

void SVMClassifyParam::MergeFrom(const SVMClassifyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.SVMClassifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defectlabelname_.MergeFrom(from.defectlabelname_);
  if (from.modelpath().size() > 0) {

    modelpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelpath_);
  }
}

void SVMClassifyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.SVMClassifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SVMClassifyParam::CopyFrom(const SVMClassifyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.SVMClassifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SVMClassifyParam::IsInitialized() const {
  return true;
}

void SVMClassifyParam::Swap(SVMClassifyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SVMClassifyParam::InternalSwap(SVMClassifyParam* other) {
  using std::swap;
  defectlabelname_.Swap(&other->defectlabelname_);
  modelpath_.Swap(&other->modelpath_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SVMClassifyParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

DTreeClassifyParam_DefectlabelnameEntry_DoNotUse::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse() {}
DTreeClassifyParam_DefectlabelnameEntry_DoNotUse::DTreeClassifyParam_DefectlabelnameEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void DTreeClassifyParam_DefectlabelnameEntry_DoNotUse::MergeFrom(const DTreeClassifyParam_DefectlabelnameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DTreeClassifyParam_DefectlabelnameEntry_DoNotUse::GetMetadata() const {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[7];
}
void DTreeClassifyParam_DefectlabelnameEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void DTreeClassifyParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DTreeClassifyParam::kModelPathFieldNumber;
const int DTreeClassifyParam::kDefectlabelnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DTreeClassifyParam::DTreeClassifyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsDTreeClassifyParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.DTreeClassifyParam)
}
DTreeClassifyParam::DTreeClassifyParam(const DTreeClassifyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  defectlabelname_.MergeFrom(from.defectlabelname_);
  modelpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modelpath().size() > 0) {
    modelpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelpath_);
  }
  // @@protoc_insertion_point(copy_constructor:Parameters.DTreeClassifyParam)
}

void DTreeClassifyParam::SharedCtor() {
  modelpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DTreeClassifyParam::~DTreeClassifyParam() {
  // @@protoc_insertion_point(destructor:Parameters.DTreeClassifyParam)
  SharedDtor();
}

void DTreeClassifyParam::SharedDtor() {
  modelpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DTreeClassifyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DTreeClassifyParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DTreeClassifyParam& DTreeClassifyParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsDTreeClassifyParam();
  return *internal_default_instance();
}

DTreeClassifyParam* DTreeClassifyParam::New(::google::protobuf::Arena* arena) const {
  DTreeClassifyParam* n = new DTreeClassifyParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DTreeClassifyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.DTreeClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defectlabelname_.Clear();
  modelpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DTreeClassifyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.DTreeClassifyParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string modelPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modelpath().data(), static_cast<int>(this->modelpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.DTreeClassifyParam.modelPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, string> defectlabelname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DTreeClassifyParam_DefectlabelnameEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DTreeClassifyParam_DefectlabelnameEntry_DoNotUse,
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&defectlabelname_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.DTreeClassifyParam.DefectlabelnameEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.DTreeClassifyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.DTreeClassifyParam)
  return false;
#undef DO_
}

void DTreeClassifyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.DTreeClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelpath().data(), static_cast<int>(this->modelpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.DTreeClassifyParam.modelPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->modelpath(), output);
  }

  // map<int32, string> defectlabelname = 2;
  if (!this->defectlabelname().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Parameters.DTreeClassifyParam.DefectlabelnameEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->defectlabelname().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->defectlabelname().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DTreeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<DTreeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.DTreeClassifyParam)
}

::google::protobuf::uint8* DTreeClassifyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.DTreeClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelpath().data(), static_cast<int>(this->modelpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.DTreeClassifyParam.modelPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modelpath(), target);
  }

  // map<int32, string> defectlabelname = 2;
  if (!this->defectlabelname().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Parameters.DTreeClassifyParam.DefectlabelnameEntry.value");
      }
    };

    if (deterministic &&
        this->defectlabelname().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->defectlabelname().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DTreeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<DTreeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.DTreeClassifyParam)
  return target;
}

size_t DTreeClassifyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.DTreeClassifyParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, string> defectlabelname = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->defectlabelname_size());
  {
    ::google::protobuf::scoped_ptr<DTreeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->defectlabelname().begin();
        it != this->defectlabelname().end(); ++it) {
      entry.reset(defectlabelname_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modelpath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DTreeClassifyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.DTreeClassifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DTreeClassifyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DTreeClassifyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.DTreeClassifyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.DTreeClassifyParam)
    MergeFrom(*source);
  }
}

void DTreeClassifyParam::MergeFrom(const DTreeClassifyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.DTreeClassifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defectlabelname_.MergeFrom(from.defectlabelname_);
  if (from.modelpath().size() > 0) {

    modelpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelpath_);
  }
}

void DTreeClassifyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.DTreeClassifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DTreeClassifyParam::CopyFrom(const DTreeClassifyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.DTreeClassifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DTreeClassifyParam::IsInitialized() const {
  return true;
}

void DTreeClassifyParam::Swap(DTreeClassifyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DTreeClassifyParam::InternalSwap(DTreeClassifyParam* other) {
  using std::swap;
  defectlabelname_.Swap(&other->defectlabelname_);
  modelpath_.Swap(&other->modelpath_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DTreeClassifyParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CaffeClassifyParam_DefectlabelnameEntry_DoNotUse::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse() {}
CaffeClassifyParam_DefectlabelnameEntry_DoNotUse::CaffeClassifyParam_DefectlabelnameEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void CaffeClassifyParam_DefectlabelnameEntry_DoNotUse::MergeFrom(const CaffeClassifyParam_DefectlabelnameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CaffeClassifyParam_DefectlabelnameEntry_DoNotUse::GetMetadata() const {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[9];
}
void CaffeClassifyParam_DefectlabelnameEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void CaffeClassifyParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaffeClassifyParam::kModelPathFieldNumber;
const int CaffeClassifyParam::kDefectlabelnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaffeClassifyParam::CaffeClassifyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsCaffeClassifyParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.CaffeClassifyParam)
}
CaffeClassifyParam::CaffeClassifyParam(const CaffeClassifyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  defectlabelname_.MergeFrom(from.defectlabelname_);
  modelpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modelpath().size() > 0) {
    modelpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelpath_);
  }
  // @@protoc_insertion_point(copy_constructor:Parameters.CaffeClassifyParam)
}

void CaffeClassifyParam::SharedCtor() {
  modelpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CaffeClassifyParam::~CaffeClassifyParam() {
  // @@protoc_insertion_point(destructor:Parameters.CaffeClassifyParam)
  SharedDtor();
}

void CaffeClassifyParam::SharedDtor() {
  modelpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CaffeClassifyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeClassifyParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CaffeClassifyParam& CaffeClassifyParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsCaffeClassifyParam();
  return *internal_default_instance();
}

CaffeClassifyParam* CaffeClassifyParam::New(::google::protobuf::Arena* arena) const {
  CaffeClassifyParam* n = new CaffeClassifyParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CaffeClassifyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.CaffeClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defectlabelname_.Clear();
  modelpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CaffeClassifyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.CaffeClassifyParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string modelPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modelpath().data(), static_cast<int>(this->modelpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.CaffeClassifyParam.modelPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, string> defectlabelname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          CaffeClassifyParam_DefectlabelnameEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CaffeClassifyParam_DefectlabelnameEntry_DoNotUse,
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&defectlabelname_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.CaffeClassifyParam.DefectlabelnameEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.CaffeClassifyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.CaffeClassifyParam)
  return false;
#undef DO_
}

void CaffeClassifyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.CaffeClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelpath().data(), static_cast<int>(this->modelpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.CaffeClassifyParam.modelPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->modelpath(), output);
  }

  // map<int32, string> defectlabelname = 2;
  if (!this->defectlabelname().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Parameters.CaffeClassifyParam.DefectlabelnameEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->defectlabelname().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->defectlabelname().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<CaffeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<CaffeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.CaffeClassifyParam)
}

::google::protobuf::uint8* CaffeClassifyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.CaffeClassifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelpath().data(), static_cast<int>(this->modelpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.CaffeClassifyParam.modelPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modelpath(), target);
  }

  // map<int32, string> defectlabelname = 2;
  if (!this->defectlabelname().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Parameters.CaffeClassifyParam.DefectlabelnameEntry.value");
      }
    };

    if (deterministic &&
        this->defectlabelname().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->defectlabelname().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<CaffeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<CaffeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->defectlabelname().begin();
          it != this->defectlabelname().end(); ++it) {
        entry.reset(defectlabelname_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.CaffeClassifyParam)
  return target;
}

size_t CaffeClassifyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.CaffeClassifyParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, string> defectlabelname = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->defectlabelname_size());
  {
    ::google::protobuf::scoped_ptr<CaffeClassifyParam_DefectlabelnameEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->defectlabelname().begin();
        it != this->defectlabelname().end(); ++it) {
      entry.reset(defectlabelname_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string modelPath = 1;
  if (this->modelpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modelpath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeClassifyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.CaffeClassifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CaffeClassifyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CaffeClassifyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.CaffeClassifyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.CaffeClassifyParam)
    MergeFrom(*source);
  }
}

void CaffeClassifyParam::MergeFrom(const CaffeClassifyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.CaffeClassifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defectlabelname_.MergeFrom(from.defectlabelname_);
  if (from.modelpath().size() > 0) {

    modelpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelpath_);
  }
}

void CaffeClassifyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.CaffeClassifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeClassifyParam::CopyFrom(const CaffeClassifyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.CaffeClassifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeClassifyParam::IsInitialized() const {
  return true;
}

void CaffeClassifyParam::Swap(CaffeClassifyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaffeClassifyParam::InternalSwap(CaffeClassifyParam* other) {
  using std::swap;
  defectlabelname_.Swap(&other->defectlabelname_);
  modelpath_.Swap(&other->modelpath_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CaffeClassifyParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BoundSearchParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundSearchParam::kLeftRange1FieldNumber;
const int BoundSearchParam::kLeftRange2FieldNumber;
const int BoundSearchParam::kRightRange1FieldNumber;
const int BoundSearchParam::kRightRange2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundSearchParam::BoundSearchParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsBoundSearchParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.BoundSearchParam)
}
BoundSearchParam::BoundSearchParam(const BoundSearchParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftrange1_, &from.leftrange1_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightrange2_) -
    reinterpret_cast<char*>(&leftrange1_)) + sizeof(rightrange2_));
  // @@protoc_insertion_point(copy_constructor:Parameters.BoundSearchParam)
}

void BoundSearchParam::SharedCtor() {
  ::memset(&leftrange1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightrange2_) -
      reinterpret_cast<char*>(&leftrange1_)) + sizeof(rightrange2_));
  _cached_size_ = 0;
}

BoundSearchParam::~BoundSearchParam() {
  // @@protoc_insertion_point(destructor:Parameters.BoundSearchParam)
  SharedDtor();
}

void BoundSearchParam::SharedDtor() {
}

void BoundSearchParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundSearchParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundSearchParam& BoundSearchParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsBoundSearchParam();
  return *internal_default_instance();
}

BoundSearchParam* BoundSearchParam::New(::google::protobuf::Arena* arena) const {
  BoundSearchParam* n = new BoundSearchParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundSearchParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.BoundSearchParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leftrange1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightrange2_) -
      reinterpret_cast<char*>(&leftrange1_)) + sizeof(rightrange2_));
  _internal_metadata_.Clear();
}

bool BoundSearchParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.BoundSearchParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float leftRange1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftrange1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float leftRange2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftrange2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rightRange1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightrange1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rightRange2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightrange2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.BoundSearchParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.BoundSearchParam)
  return false;
#undef DO_
}

void BoundSearchParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.BoundSearchParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float leftRange1 = 1;
  if (this->leftrange1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->leftrange1(), output);
  }

  // float leftRange2 = 2;
  if (this->leftrange2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->leftrange2(), output);
  }

  // float rightRange1 = 3;
  if (this->rightrange1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rightrange1(), output);
  }

  // float rightRange2 = 4;
  if (this->rightrange2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rightrange2(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.BoundSearchParam)
}

::google::protobuf::uint8* BoundSearchParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.BoundSearchParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float leftRange1 = 1;
  if (this->leftrange1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->leftrange1(), target);
  }

  // float leftRange2 = 2;
  if (this->leftrange2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->leftrange2(), target);
  }

  // float rightRange1 = 3;
  if (this->rightrange1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rightrange1(), target);
  }

  // float rightRange2 = 4;
  if (this->rightrange2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rightrange2(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.BoundSearchParam)
  return target;
}

size_t BoundSearchParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.BoundSearchParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float leftRange1 = 1;
  if (this->leftrange1() != 0) {
    total_size += 1 + 4;
  }

  // float leftRange2 = 2;
  if (this->leftrange2() != 0) {
    total_size += 1 + 4;
  }

  // float rightRange1 = 3;
  if (this->rightrange1() != 0) {
    total_size += 1 + 4;
  }

  // float rightRange2 = 4;
  if (this->rightrange2() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundSearchParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.BoundSearchParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundSearchParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundSearchParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.BoundSearchParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.BoundSearchParam)
    MergeFrom(*source);
  }
}

void BoundSearchParam::MergeFrom(const BoundSearchParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.BoundSearchParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leftrange1() != 0) {
    set_leftrange1(from.leftrange1());
  }
  if (from.leftrange2() != 0) {
    set_leftrange2(from.leftrange2());
  }
  if (from.rightrange1() != 0) {
    set_rightrange1(from.rightrange1());
  }
  if (from.rightrange2() != 0) {
    set_rightrange2(from.rightrange2());
  }
}

void BoundSearchParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.BoundSearchParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundSearchParam::CopyFrom(const BoundSearchParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.BoundSearchParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundSearchParam::IsInitialized() const {
  return true;
}

void BoundSearchParam::Swap(BoundSearchParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundSearchParam::InternalSwap(BoundSearchParam* other) {
  using std::swap;
  swap(leftrange1_, other->leftrange1_);
  swap(leftrange2_, other->leftrange2_);
  swap(rightrange1_, other->rightrange1_);
  swap(rightrange2_, other->rightrange2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundSearchParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InspectParam::InitAsDefaultInstance() {
  ::Parameters::_InspectParam_default_instance_._instance.get_mutable()->dogparam_ = const_cast< ::Parameters::DOGparam*>(
      ::Parameters::DOGparam::internal_default_instance());
  ::Parameters::_InspectParam_default_instance_._instance.get_mutable()->expvarparam_ = const_cast< ::Parameters::EXPVARparam*>(
      ::Parameters::EXPVARparam::internal_default_instance());
  ::Parameters::_InspectParam_default_instance_._instance.get_mutable()->maxminparam_ = const_cast< ::Parameters::MAXMINparm*>(
      ::Parameters::MAXMINparm::internal_default_instance());
  ::Parameters::_InspectParam_default_instance_._instance.get_mutable()->svmparam_ = const_cast< ::Parameters::SVMClassifyParam*>(
      ::Parameters::SVMClassifyParam::internal_default_instance());
  ::Parameters::_InspectParam_default_instance_._instance.get_mutable()->dtreeparam_ = const_cast< ::Parameters::DTreeClassifyParam*>(
      ::Parameters::DTreeClassifyParam::internal_default_instance());
  ::Parameters::_InspectParam_default_instance_._instance.get_mutable()->caffeparam_ = const_cast< ::Parameters::CaffeClassifyParam*>(
      ::Parameters::CaffeClassifyParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectParam::kDstvaluefrdFieldNumber;
const int InspectParam::kDstvaluebgdFieldNumber;
const int InspectParam::kBoundsearchlistFieldNumber;
const int InspectParam::kChecktypeFieldNumber;
const int InspectParam::kDogParamFieldNumber;
const int InspectParam::kExpvarParamFieldNumber;
const int InspectParam::kMaxminParamFieldNumber;
const int InspectParam::kBlobThrFieldNumber;
const int InspectParam::kClassificcationtypeFieldNumber;
const int InspectParam::kGeoParamlistFieldNumber;
const int InspectParam::kSvmParamFieldNumber;
const int InspectParam::kDTreeParamFieldNumber;
const int InspectParam::kCaffeParamFieldNumber;
const int InspectParam::kExposureTimeFieldNumber;
const int InspectParam::kGainFieldNumber;
const int InspectParam::kSavepathFieldNumber;
const int InspectParam::kParamnameFieldNumber;
const int InspectParam::kLayerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectParam::InspectParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsInspectParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.InspectParam)
}
InspectParam::InspectParam(const InspectParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      boundsearchlist_(from.boundsearchlist_),
      geoparamlist_(from.geoparamlist_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  savepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.savepath().size() > 0) {
    savepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.savepath_);
  }
  paramname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.paramname().size() > 0) {
    paramname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paramname_);
  }
  if (from.has_dogparam()) {
    dogparam_ = new ::Parameters::DOGparam(*from.dogparam_);
  } else {
    dogparam_ = NULL;
  }
  if (from.has_expvarparam()) {
    expvarparam_ = new ::Parameters::EXPVARparam(*from.expvarparam_);
  } else {
    expvarparam_ = NULL;
  }
  if (from.has_maxminparam()) {
    maxminparam_ = new ::Parameters::MAXMINparm(*from.maxminparam_);
  } else {
    maxminparam_ = NULL;
  }
  if (from.has_svmparam()) {
    svmparam_ = new ::Parameters::SVMClassifyParam(*from.svmparam_);
  } else {
    svmparam_ = NULL;
  }
  if (from.has_dtreeparam()) {
    dtreeparam_ = new ::Parameters::DTreeClassifyParam(*from.dtreeparam_);
  } else {
    dtreeparam_ = NULL;
  }
  if (from.has_caffeparam()) {
    caffeparam_ = new ::Parameters::CaffeClassifyParam(*from.caffeparam_);
  } else {
    caffeparam_ = NULL;
  }
  ::memcpy(&dstvaluefrd_, &from.dstvaluefrd_,
    static_cast<size_t>(reinterpret_cast<char*>(&layertype_) -
    reinterpret_cast<char*>(&dstvaluefrd_)) + sizeof(layertype_));
  // @@protoc_insertion_point(copy_constructor:Parameters.InspectParam)
}

void InspectParam::SharedCtor() {
  savepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paramname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dogparam_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layertype_) -
      reinterpret_cast<char*>(&dogparam_)) + sizeof(layertype_));
  _cached_size_ = 0;
}

InspectParam::~InspectParam() {
  // @@protoc_insertion_point(destructor:Parameters.InspectParam)
  SharedDtor();
}

void InspectParam::SharedDtor() {
  savepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paramname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dogparam_;
  if (this != internal_default_instance()) delete expvarparam_;
  if (this != internal_default_instance()) delete maxminparam_;
  if (this != internal_default_instance()) delete svmparam_;
  if (this != internal_default_instance()) delete dtreeparam_;
  if (this != internal_default_instance()) delete caffeparam_;
}

void InspectParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InspectParam& InspectParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsInspectParam();
  return *internal_default_instance();
}

InspectParam* InspectParam::New(::google::protobuf::Arena* arena) const {
  InspectParam* n = new InspectParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.InspectParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundsearchlist_.Clear();
  geoparamlist_.Clear();
  savepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paramname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && dogparam_ != NULL) {
    delete dogparam_;
  }
  dogparam_ = NULL;
  if (GetArenaNoVirtual() == NULL && expvarparam_ != NULL) {
    delete expvarparam_;
  }
  expvarparam_ = NULL;
  if (GetArenaNoVirtual() == NULL && maxminparam_ != NULL) {
    delete maxminparam_;
  }
  maxminparam_ = NULL;
  if (GetArenaNoVirtual() == NULL && svmparam_ != NULL) {
    delete svmparam_;
  }
  svmparam_ = NULL;
  if (GetArenaNoVirtual() == NULL && dtreeparam_ != NULL) {
    delete dtreeparam_;
  }
  dtreeparam_ = NULL;
  if (GetArenaNoVirtual() == NULL && caffeparam_ != NULL) {
    delete caffeparam_;
  }
  caffeparam_ = NULL;
  ::memset(&dstvaluefrd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layertype_) -
      reinterpret_cast<char*>(&dstvaluefrd_)) + sizeof(layertype_));
  _internal_metadata_.Clear();
}

bool InspectParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.InspectParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dstvaluefrd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstvaluefrd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dstvaluebgd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dstvaluebgd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Parameters.BoundSearchParam boundsearchlist = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_boundsearchlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.InspectParam.CheckType checktype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_checktype(static_cast< ::Parameters::InspectParam_CheckType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.DOGparam dogParam = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dogparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.EXPVARparam expvarParam = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expvarparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.MAXMINparm maxminParam = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maxminparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blobThr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blobthr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.InspectParam.ClassifictionType classificcationtype = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classificcationtype(static_cast< ::Parameters::InspectParam_ClassifictionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Parameters.GeoClassifiyParam geoParamlist = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_geoparamlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.SVMClassifyParam svmParam = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_svmparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.DTreeClassifyParam DTreeParam = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dtreeparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.CaffeClassifyParam CaffeParam = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caffeparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float exposureTime = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exposuretime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string savepath = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_savepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->savepath().data(), static_cast<int>(this->savepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.InspectParam.savepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string paramname = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->paramname().data(), static_cast<int>(this->paramname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.InspectParam.paramname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 layerType = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.InspectParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.InspectParam)
  return false;
#undef DO_
}

void InspectParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.InspectParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dstvaluefrd = 1;
  if (this->dstvaluefrd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dstvaluefrd(), output);
  }

  // int32 dstvaluebgd = 2;
  if (this->dstvaluebgd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dstvaluebgd(), output);
  }

  // repeated .Parameters.BoundSearchParam boundsearchlist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundsearchlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boundsearchlist(static_cast<int>(i)), output);
  }

  // .Parameters.InspectParam.CheckType checktype = 4;
  if (this->checktype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->checktype(), output);
  }

  // .Parameters.DOGparam dogParam = 5;
  if (this->has_dogparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dogparam_, output);
  }

  // .Parameters.EXPVARparam expvarParam = 6;
  if (this->has_expvarparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->expvarparam_, output);
  }

  // .Parameters.MAXMINparm maxminParam = 7;
  if (this->has_maxminparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->maxminparam_, output);
  }

  // float blobThr = 8;
  if (this->blobthr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->blobthr(), output);
  }

  // .Parameters.InspectParam.ClassifictionType classificcationtype = 9;
  if (this->classificcationtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->classificcationtype(), output);
  }

  // repeated .Parameters.GeoClassifiyParam geoParamlist = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geoparamlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->geoparamlist(static_cast<int>(i)), output);
  }

  // .Parameters.SVMClassifyParam svmParam = 11;
  if (this->has_svmparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->svmparam_, output);
  }

  // .Parameters.DTreeClassifyParam DTreeParam = 12;
  if (this->has_dtreeparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->dtreeparam_, output);
  }

  // .Parameters.CaffeClassifyParam CaffeParam = 13;
  if (this->has_caffeparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->caffeparam_, output);
  }

  // float exposureTime = 14;
  if (this->exposuretime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->exposuretime(), output);
  }

  // float gain = 15;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->gain(), output);
  }

  // string savepath = 16;
  if (this->savepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->savepath().data(), static_cast<int>(this->savepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.InspectParam.savepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->savepath(), output);
  }

  // string paramname = 17;
  if (this->paramname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paramname().data(), static_cast<int>(this->paramname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.InspectParam.paramname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->paramname(), output);
  }

  // int32 layerType = 18;
  if (this->layertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->layertype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.InspectParam)
}

::google::protobuf::uint8* InspectParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.InspectParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dstvaluefrd = 1;
  if (this->dstvaluefrd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dstvaluefrd(), target);
  }

  // int32 dstvaluebgd = 2;
  if (this->dstvaluebgd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dstvaluebgd(), target);
  }

  // repeated .Parameters.BoundSearchParam boundsearchlist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundsearchlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->boundsearchlist(static_cast<int>(i)), deterministic, target);
  }

  // .Parameters.InspectParam.CheckType checktype = 4;
  if (this->checktype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->checktype(), target);
  }

  // .Parameters.DOGparam dogParam = 5;
  if (this->has_dogparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->dogparam_, deterministic, target);
  }

  // .Parameters.EXPVARparam expvarParam = 6;
  if (this->has_expvarparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->expvarparam_, deterministic, target);
  }

  // .Parameters.MAXMINparm maxminParam = 7;
  if (this->has_maxminparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->maxminparam_, deterministic, target);
  }

  // float blobThr = 8;
  if (this->blobthr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->blobthr(), target);
  }

  // .Parameters.InspectParam.ClassifictionType classificcationtype = 9;
  if (this->classificcationtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->classificcationtype(), target);
  }

  // repeated .Parameters.GeoClassifiyParam geoParamlist = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geoparamlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->geoparamlist(static_cast<int>(i)), deterministic, target);
  }

  // .Parameters.SVMClassifyParam svmParam = 11;
  if (this->has_svmparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->svmparam_, deterministic, target);
  }

  // .Parameters.DTreeClassifyParam DTreeParam = 12;
  if (this->has_dtreeparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->dtreeparam_, deterministic, target);
  }

  // .Parameters.CaffeClassifyParam CaffeParam = 13;
  if (this->has_caffeparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->caffeparam_, deterministic, target);
  }

  // float exposureTime = 14;
  if (this->exposuretime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->exposuretime(), target);
  }

  // float gain = 15;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->gain(), target);
  }

  // string savepath = 16;
  if (this->savepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->savepath().data(), static_cast<int>(this->savepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.InspectParam.savepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->savepath(), target);
  }

  // string paramname = 17;
  if (this->paramname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paramname().data(), static_cast<int>(this->paramname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.InspectParam.paramname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->paramname(), target);
  }

  // int32 layerType = 18;
  if (this->layertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->layertype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.InspectParam)
  return target;
}

size_t InspectParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.InspectParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Parameters.BoundSearchParam boundsearchlist = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->boundsearchlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boundsearchlist(static_cast<int>(i)));
    }
  }

  // repeated .Parameters.GeoClassifiyParam geoParamlist = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->geoparamlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->geoparamlist(static_cast<int>(i)));
    }
  }

  // string savepath = 16;
  if (this->savepath().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->savepath());
  }

  // string paramname = 17;
  if (this->paramname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->paramname());
  }

  // .Parameters.DOGparam dogParam = 5;
  if (this->has_dogparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dogparam_);
  }

  // .Parameters.EXPVARparam expvarParam = 6;
  if (this->has_expvarparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->expvarparam_);
  }

  // .Parameters.MAXMINparm maxminParam = 7;
  if (this->has_maxminparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->maxminparam_);
  }

  // .Parameters.SVMClassifyParam svmParam = 11;
  if (this->has_svmparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->svmparam_);
  }

  // .Parameters.DTreeClassifyParam DTreeParam = 12;
  if (this->has_dtreeparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dtreeparam_);
  }

  // .Parameters.CaffeClassifyParam CaffeParam = 13;
  if (this->has_caffeparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->caffeparam_);
  }

  // int32 dstvaluefrd = 1;
  if (this->dstvaluefrd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dstvaluefrd());
  }

  // int32 dstvaluebgd = 2;
  if (this->dstvaluebgd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dstvaluebgd());
  }

  // .Parameters.InspectParam.CheckType checktype = 4;
  if (this->checktype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->checktype());
  }

  // float blobThr = 8;
  if (this->blobthr() != 0) {
    total_size += 1 + 4;
  }

  // .Parameters.InspectParam.ClassifictionType classificcationtype = 9;
  if (this->classificcationtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->classificcationtype());
  }

  // float exposureTime = 14;
  if (this->exposuretime() != 0) {
    total_size += 1 + 4;
  }

  // float gain = 15;
  if (this->gain() != 0) {
    total_size += 1 + 4;
  }

  // int32 layerType = 18;
  if (this->layertype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->layertype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.InspectParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.InspectParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.InspectParam)
    MergeFrom(*source);
  }
}

void InspectParam::MergeFrom(const InspectParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.InspectParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundsearchlist_.MergeFrom(from.boundsearchlist_);
  geoparamlist_.MergeFrom(from.geoparamlist_);
  if (from.savepath().size() > 0) {

    savepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.savepath_);
  }
  if (from.paramname().size() > 0) {

    paramname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paramname_);
  }
  if (from.has_dogparam()) {
    mutable_dogparam()->::Parameters::DOGparam::MergeFrom(from.dogparam());
  }
  if (from.has_expvarparam()) {
    mutable_expvarparam()->::Parameters::EXPVARparam::MergeFrom(from.expvarparam());
  }
  if (from.has_maxminparam()) {
    mutable_maxminparam()->::Parameters::MAXMINparm::MergeFrom(from.maxminparam());
  }
  if (from.has_svmparam()) {
    mutable_svmparam()->::Parameters::SVMClassifyParam::MergeFrom(from.svmparam());
  }
  if (from.has_dtreeparam()) {
    mutable_dtreeparam()->::Parameters::DTreeClassifyParam::MergeFrom(from.dtreeparam());
  }
  if (from.has_caffeparam()) {
    mutable_caffeparam()->::Parameters::CaffeClassifyParam::MergeFrom(from.caffeparam());
  }
  if (from.dstvaluefrd() != 0) {
    set_dstvaluefrd(from.dstvaluefrd());
  }
  if (from.dstvaluebgd() != 0) {
    set_dstvaluebgd(from.dstvaluebgd());
  }
  if (from.checktype() != 0) {
    set_checktype(from.checktype());
  }
  if (from.blobthr() != 0) {
    set_blobthr(from.blobthr());
  }
  if (from.classificcationtype() != 0) {
    set_classificcationtype(from.classificcationtype());
  }
  if (from.exposuretime() != 0) {
    set_exposuretime(from.exposuretime());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
  if (from.layertype() != 0) {
    set_layertype(from.layertype());
  }
}

void InspectParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.InspectParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectParam::CopyFrom(const InspectParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.InspectParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectParam::IsInitialized() const {
  return true;
}

void InspectParam::Swap(InspectParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectParam::InternalSwap(InspectParam* other) {
  using std::swap;
  boundsearchlist_.InternalSwap(&other->boundsearchlist_);
  geoparamlist_.InternalSwap(&other->geoparamlist_);
  savepath_.Swap(&other->savepath_);
  paramname_.Swap(&other->paramname_);
  swap(dogparam_, other->dogparam_);
  swap(expvarparam_, other->expvarparam_);
  swap(maxminparam_, other->maxminparam_);
  swap(svmparam_, other->svmparam_);
  swap(dtreeparam_, other->dtreeparam_);
  swap(caffeparam_, other->caffeparam_);
  swap(dstvaluefrd_, other->dstvaluefrd_);
  swap(dstvaluebgd_, other->dstvaluebgd_);
  swap(checktype_, other->checktype_);
  swap(blobthr_, other->blobthr_);
  swap(classificcationtype_, other->classificcationtype_);
  swap(exposuretime_, other->exposuretime_);
  swap(gain_, other->gain_);
  swap(layertype_, other->layertype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StripParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StripParam::kLeftoffsetFieldNumber;
const int StripParam::kStripwidthFieldNumber;
const int StripParam::kAllwidthFieldNumber;
const int StripParam::kStripcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StripParam::StripParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsStripParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.StripParam)
}
StripParam::StripParam(const StripParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stripwidth_(from.stripwidth_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftoffset_, &from.leftoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&stripcount_) -
    reinterpret_cast<char*>(&leftoffset_)) + sizeof(stripcount_));
  // @@protoc_insertion_point(copy_constructor:Parameters.StripParam)
}

void StripParam::SharedCtor() {
  ::memset(&leftoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripcount_) -
      reinterpret_cast<char*>(&leftoffset_)) + sizeof(stripcount_));
  _cached_size_ = 0;
}

StripParam::~StripParam() {
  // @@protoc_insertion_point(destructor:Parameters.StripParam)
  SharedDtor();
}

void StripParam::SharedDtor() {
}

void StripParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StripParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StripParam& StripParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsStripParam();
  return *internal_default_instance();
}

StripParam* StripParam::New(::google::protobuf::Arena* arena) const {
  StripParam* n = new StripParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StripParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.StripParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stripwidth_.Clear();
  ::memset(&leftoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripcount_) -
      reinterpret_cast<char*>(&leftoffset_)) + sizeof(stripcount_));
  _internal_metadata_.Clear();
}

bool StripParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.StripParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float leftoffset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float stripwidth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_stripwidth())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_stripwidth())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float allwidth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &allwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stripcount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stripcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.StripParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.StripParam)
  return false;
#undef DO_
}

void StripParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.StripParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float leftoffset = 1;
  if (this->leftoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->leftoffset(), output);
  }

  // repeated float stripwidth = 2;
  if (this->stripwidth_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stripwidth_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->stripwidth().data(), this->stripwidth_size(), output);
  }

  // float allwidth = 3;
  if (this->allwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->allwidth(), output);
  }

  // int32 stripcount = 4;
  if (this->stripcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stripcount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.StripParam)
}

::google::protobuf::uint8* StripParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.StripParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float leftoffset = 1;
  if (this->leftoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->leftoffset(), target);
  }

  // repeated float stripwidth = 2;
  if (this->stripwidth_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _stripwidth_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->stripwidth_, target);
  }

  // float allwidth = 3;
  if (this->allwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->allwidth(), target);
  }

  // int32 stripcount = 4;
  if (this->stripcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stripcount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.StripParam)
  return target;
}

size_t StripParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.StripParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float stripwidth = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stripwidth_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stripwidth_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float leftoffset = 1;
  if (this->leftoffset() != 0) {
    total_size += 1 + 4;
  }

  // float allwidth = 3;
  if (this->allwidth() != 0) {
    total_size += 1 + 4;
  }

  // int32 stripcount = 4;
  if (this->stripcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stripcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StripParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.StripParam)
  GOOGLE_DCHECK_NE(&from, this);
  const StripParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StripParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.StripParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.StripParam)
    MergeFrom(*source);
  }
}

void StripParam::MergeFrom(const StripParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.StripParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stripwidth_.MergeFrom(from.stripwidth_);
  if (from.leftoffset() != 0) {
    set_leftoffset(from.leftoffset());
  }
  if (from.allwidth() != 0) {
    set_allwidth(from.allwidth());
  }
  if (from.stripcount() != 0) {
    set_stripcount(from.stripcount());
  }
}

void StripParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.StripParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripParam::CopyFrom(const StripParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.StripParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripParam::IsInitialized() const {
  return true;
}

void StripParam::Swap(StripParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StripParam::InternalSwap(StripParam* other) {
  using std::swap;
  stripwidth_.InternalSwap(&other->stripwidth_);
  swap(leftoffset_, other->leftoffset_);
  swap(allwidth_, other->allwidth_);
  swap(stripcount_, other->stripcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StripParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SheetInfo::InitAsDefaultInstance() {
  ::Parameters::_SheetInfo_default_instance_._instance.get_mutable()->stripparam_ = const_cast< ::Parameters::StripParam*>(
      ::Parameters::StripParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SheetInfo::kUsernameFieldNumber;
const int SheetInfo::kMachinenumberFieldNumber;
const int SheetInfo::kImageModelFieldNumber;
const int SheetInfo::kProdctnameFieldNumber;
const int SheetInfo::kOrdernumberFieldNumber;
const int SheetInfo::kBatchnumberFieldNumber;
const int SheetInfo::kInspectparamnameFieldNumber;
const int SheetInfo::kRemarkFieldNumber;
const int SheetInfo::kStripparamFieldNumber;
const int SheetInfo::kOffsetBoundaryToZeroFieldNumber;
const int SheetInfo::kStartLengthFieldNumber;
const int SheetInfo::kIsLeftToRightFieldNumber;
const int SheetInfo::kBoundOffsetLeftFieldNumber;
const int SheetInfo::kBoundOffsetRightFieldNumber;
const int SheetInfo::kProductThicknessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SheetInfo::SheetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSheetInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.SheetInfo)
}
SheetInfo::SheetInfo(const SheetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  machinenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.machinenumber().size() > 0) {
    machinenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machinenumber_);
  }
  imagemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.imagemodel().size() > 0) {
    imagemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagemodel_);
  }
  prodctname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prodctname().size() > 0) {
    prodctname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prodctname_);
  }
  ordernumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ordernumber().size() > 0) {
    ordernumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordernumber_);
  }
  batchnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.batchnumber().size() > 0) {
    batchnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batchnumber_);
  }
  inspectparamname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inspectparamname().size() > 0) {
    inspectparamname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspectparamname_);
  }
  remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remark().size() > 0) {
    remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remark_);
  }
  if (from.has_stripparam()) {
    stripparam_ = new ::Parameters::StripParam(*from.stripparam_);
  } else {
    stripparam_ = NULL;
  }
  ::memcpy(&offsetboundarytozero_, &from.offsetboundarytozero_,
    static_cast<size_t>(reinterpret_cast<char*>(&productthickness_) -
    reinterpret_cast<char*>(&offsetboundarytozero_)) + sizeof(productthickness_));
  // @@protoc_insertion_point(copy_constructor:Parameters.SheetInfo)
}

void SheetInfo::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machinenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prodctname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordernumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspectparamname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stripparam_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&productthickness_) -
      reinterpret_cast<char*>(&stripparam_)) + sizeof(productthickness_));
  _cached_size_ = 0;
}

SheetInfo::~SheetInfo() {
  // @@protoc_insertion_point(destructor:Parameters.SheetInfo)
  SharedDtor();
}

void SheetInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machinenumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagemodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prodctname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordernumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchnumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspectparamname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stripparam_;
}

void SheetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SheetInfo::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SheetInfo& SheetInfo::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSheetInfo();
  return *internal_default_instance();
}

SheetInfo* SheetInfo::New(::google::protobuf::Arena* arena) const {
  SheetInfo* n = new SheetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SheetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.SheetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machinenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prodctname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordernumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batchnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspectparamname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stripparam_ != NULL) {
    delete stripparam_;
  }
  stripparam_ = NULL;
  ::memset(&offsetboundarytozero_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&productthickness_) -
      reinterpret_cast<char*>(&offsetboundarytozero_)) + sizeof(productthickness_));
  _internal_metadata_.Clear();
}

bool SheetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.SheetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SheetInfo.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string machinenumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machinenumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->machinenumber().data(), static_cast<int>(this->machinenumber().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SheetInfo.machinenumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string imageModel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagemodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imagemodel().data(), static_cast<int>(this->imagemodel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SheetInfo.imageModel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prodctname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prodctname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prodctname().data(), static_cast<int>(this->prodctname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SheetInfo.prodctname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ordernumber = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordernumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordernumber().data(), static_cast<int>(this->ordernumber().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SheetInfo.ordernumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string batchnumber = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batchnumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->batchnumber().data(), static_cast<int>(this->batchnumber().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SheetInfo.batchnumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inspectparamname = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inspectparamname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inspectparamname().data(), static_cast<int>(this->inspectparamname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SheetInfo.inspectparamname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Parameters.StripParam stripparam = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stripparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remark = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remark().data(), static_cast<int>(this->remark().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SheetInfo.remark"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float offsetBoundaryToZero = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetboundarytozero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float startLength = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLeftToRight = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islefttoright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float boundOffsetLeft = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boundoffsetleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float boundOffsetRight = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boundoffsetright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float productThickness = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &productthickness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.SheetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.SheetInfo)
  return false;
#undef DO_
}

void SheetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.SheetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string machinenumber = 2;
  if (this->machinenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machinenumber().data(), static_cast<int>(this->machinenumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.machinenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->machinenumber(), output);
  }

  // string imageModel = 3;
  if (this->imagemodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imagemodel().data(), static_cast<int>(this->imagemodel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.imageModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imagemodel(), output);
  }

  // string prodctname = 4;
  if (this->prodctname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prodctname().data(), static_cast<int>(this->prodctname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.prodctname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prodctname(), output);
  }

  // string ordernumber = 5;
  if (this->ordernumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordernumber().data(), static_cast<int>(this->ordernumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.ordernumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ordernumber(), output);
  }

  // string batchnumber = 6;
  if (this->batchnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batchnumber().data(), static_cast<int>(this->batchnumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.batchnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->batchnumber(), output);
  }

  // string inspectparamname = 7;
  if (this->inspectparamname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspectparamname().data(), static_cast<int>(this->inspectparamname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.inspectparamname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->inspectparamname(), output);
  }

  // .Parameters.StripParam stripparam = 8;
  if (this->has_stripparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stripparam_, output);
  }

  // string remark = 9;
  if (this->remark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remark().data(), static_cast<int>(this->remark().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->remark(), output);
  }

  // float offsetBoundaryToZero = 10;
  if (this->offsetboundarytozero() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->offsetboundarytozero(), output);
  }

  // float startLength = 11;
  if (this->startlength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->startlength(), output);
  }

  // bool isLeftToRight = 12;
  if (this->islefttoright() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->islefttoright(), output);
  }

  // float boundOffsetLeft = 13;
  if (this->boundoffsetleft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->boundoffsetleft(), output);
  }

  // float boundOffsetRight = 14;
  if (this->boundoffsetright() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->boundoffsetright(), output);
  }

  // float productThickness = 15;
  if (this->productthickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->productthickness(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.SheetInfo)
}

::google::protobuf::uint8* SheetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.SheetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string machinenumber = 2;
  if (this->machinenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->machinenumber().data(), static_cast<int>(this->machinenumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.machinenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machinenumber(), target);
  }

  // string imageModel = 3;
  if (this->imagemodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imagemodel().data(), static_cast<int>(this->imagemodel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.imageModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imagemodel(), target);
  }

  // string prodctname = 4;
  if (this->prodctname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prodctname().data(), static_cast<int>(this->prodctname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.prodctname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prodctname(), target);
  }

  // string ordernumber = 5;
  if (this->ordernumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordernumber().data(), static_cast<int>(this->ordernumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.ordernumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ordernumber(), target);
  }

  // string batchnumber = 6;
  if (this->batchnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->batchnumber().data(), static_cast<int>(this->batchnumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.batchnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->batchnumber(), target);
  }

  // string inspectparamname = 7;
  if (this->inspectparamname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspectparamname().data(), static_cast<int>(this->inspectparamname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.inspectparamname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->inspectparamname(), target);
  }

  // .Parameters.StripParam stripparam = 8;
  if (this->has_stripparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->stripparam_, deterministic, target);
  }

  // string remark = 9;
  if (this->remark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remark().data(), static_cast<int>(this->remark().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SheetInfo.remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->remark(), target);
  }

  // float offsetBoundaryToZero = 10;
  if (this->offsetboundarytozero() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->offsetboundarytozero(), target);
  }

  // float startLength = 11;
  if (this->startlength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->startlength(), target);
  }

  // bool isLeftToRight = 12;
  if (this->islefttoright() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->islefttoright(), target);
  }

  // float boundOffsetLeft = 13;
  if (this->boundoffsetleft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->boundoffsetleft(), target);
  }

  // float boundOffsetRight = 14;
  if (this->boundoffsetright() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->boundoffsetright(), target);
  }

  // float productThickness = 15;
  if (this->productthickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->productthickness(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.SheetInfo)
  return target;
}

size_t SheetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.SheetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string machinenumber = 2;
  if (this->machinenumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->machinenumber());
  }

  // string imageModel = 3;
  if (this->imagemodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imagemodel());
  }

  // string prodctname = 4;
  if (this->prodctname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prodctname());
  }

  // string ordernumber = 5;
  if (this->ordernumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordernumber());
  }

  // string batchnumber = 6;
  if (this->batchnumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->batchnumber());
  }

  // string inspectparamname = 7;
  if (this->inspectparamname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inspectparamname());
  }

  // string remark = 9;
  if (this->remark().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remark());
  }

  // .Parameters.StripParam stripparam = 8;
  if (this->has_stripparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->stripparam_);
  }

  // float offsetBoundaryToZero = 10;
  if (this->offsetboundarytozero() != 0) {
    total_size += 1 + 4;
  }

  // float startLength = 11;
  if (this->startlength() != 0) {
    total_size += 1 + 4;
  }

  // bool isLeftToRight = 12;
  if (this->islefttoright() != 0) {
    total_size += 1 + 1;
  }

  // float boundOffsetLeft = 13;
  if (this->boundoffsetleft() != 0) {
    total_size += 1 + 4;
  }

  // float boundOffsetRight = 14;
  if (this->boundoffsetright() != 0) {
    total_size += 1 + 4;
  }

  // float productThickness = 15;
  if (this->productthickness() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SheetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.SheetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SheetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.SheetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.SheetInfo)
    MergeFrom(*source);
  }
}

void SheetInfo::MergeFrom(const SheetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.SheetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.machinenumber().size() > 0) {

    machinenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.machinenumber_);
  }
  if (from.imagemodel().size() > 0) {

    imagemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagemodel_);
  }
  if (from.prodctname().size() > 0) {

    prodctname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prodctname_);
  }
  if (from.ordernumber().size() > 0) {

    ordernumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordernumber_);
  }
  if (from.batchnumber().size() > 0) {

    batchnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.batchnumber_);
  }
  if (from.inspectparamname().size() > 0) {

    inspectparamname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspectparamname_);
  }
  if (from.remark().size() > 0) {

    remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remark_);
  }
  if (from.has_stripparam()) {
    mutable_stripparam()->::Parameters::StripParam::MergeFrom(from.stripparam());
  }
  if (from.offsetboundarytozero() != 0) {
    set_offsetboundarytozero(from.offsetboundarytozero());
  }
  if (from.startlength() != 0) {
    set_startlength(from.startlength());
  }
  if (from.islefttoright() != 0) {
    set_islefttoright(from.islefttoright());
  }
  if (from.boundoffsetleft() != 0) {
    set_boundoffsetleft(from.boundoffsetleft());
  }
  if (from.boundoffsetright() != 0) {
    set_boundoffsetright(from.boundoffsetright());
  }
  if (from.productthickness() != 0) {
    set_productthickness(from.productthickness());
  }
}

void SheetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.SheetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetInfo::CopyFrom(const SheetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.SheetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetInfo::IsInitialized() const {
  return true;
}

void SheetInfo::Swap(SheetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SheetInfo::InternalSwap(SheetInfo* other) {
  using std::swap;
  username_.Swap(&other->username_);
  machinenumber_.Swap(&other->machinenumber_);
  imagemodel_.Swap(&other->imagemodel_);
  prodctname_.Swap(&other->prodctname_);
  ordernumber_.Swap(&other->ordernumber_);
  batchnumber_.Swap(&other->batchnumber_);
  inspectparamname_.Swap(&other->inspectparamname_);
  remark_.Swap(&other->remark_);
  swap(stripparam_, other->stripparam_);
  swap(offsetboundarytozero_, other->offsetboundarytozero_);
  swap(startlength_, other->startlength_);
  swap(islefttoright_, other->islefttoright_);
  swap(boundoffsetleft_, other->boundoffsetleft_);
  swap(boundoffsetright_, other->boundoffsetright_);
  swap(productthickness_, other->productthickness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SheetInfo::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RunTimeParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunTimeParam::kThreadnumFieldNumber;
const int RunTimeParam::kFreamwidthFieldNumber;
const int RunTimeParam::kFreamheightFieldNumber;
const int RunTimeParam::kDowmsampleFieldNumber;
const int RunTimeParam::kSplitsizexFieldNumber;
const int RunTimeParam::kSplitsizeyFieldNumber;
const int RunTimeParam::kIsgpuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunTimeParam::RunTimeParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsRunTimeParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.RunTimeParam)
}
RunTimeParam::RunTimeParam(const RunTimeParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threadnum_, &from.threadnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&isgpu_) -
    reinterpret_cast<char*>(&threadnum_)) + sizeof(isgpu_));
  // @@protoc_insertion_point(copy_constructor:Parameters.RunTimeParam)
}

void RunTimeParam::SharedCtor() {
  ::memset(&threadnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isgpu_) -
      reinterpret_cast<char*>(&threadnum_)) + sizeof(isgpu_));
  _cached_size_ = 0;
}

RunTimeParam::~RunTimeParam() {
  // @@protoc_insertion_point(destructor:Parameters.RunTimeParam)
  SharedDtor();
}

void RunTimeParam::SharedDtor() {
}

void RunTimeParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunTimeParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RunTimeParam& RunTimeParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsRunTimeParam();
  return *internal_default_instance();
}

RunTimeParam* RunTimeParam::New(::google::protobuf::Arena* arena) const {
  RunTimeParam* n = new RunTimeParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunTimeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.RunTimeParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&threadnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isgpu_) -
      reinterpret_cast<char*>(&threadnum_)) + sizeof(isgpu_));
  _internal_metadata_.Clear();
}

bool RunTimeParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.RunTimeParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 threadnum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threadnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 freamwidth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freamwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 freamheight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freamheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dowmsample = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dowmsample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 splitsizex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splitsizex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 splitsizey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &splitsizey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isgpu = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.RunTimeParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.RunTimeParam)
  return false;
#undef DO_
}

void RunTimeParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.RunTimeParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threadnum = 1;
  if (this->threadnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->threadnum(), output);
  }

  // int32 freamwidth = 2;
  if (this->freamwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freamwidth(), output);
  }

  // int32 freamheight = 3;
  if (this->freamheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freamheight(), output);
  }

  // int32 dowmsample = 4;
  if (this->dowmsample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dowmsample(), output);
  }

  // int32 splitsizex = 5;
  if (this->splitsizex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->splitsizex(), output);
  }

  // int32 splitsizey = 6;
  if (this->splitsizey() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->splitsizey(), output);
  }

  // bool isgpu = 7;
  if (this->isgpu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isgpu(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.RunTimeParam)
}

::google::protobuf::uint8* RunTimeParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.RunTimeParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threadnum = 1;
  if (this->threadnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->threadnum(), target);
  }

  // int32 freamwidth = 2;
  if (this->freamwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freamwidth(), target);
  }

  // int32 freamheight = 3;
  if (this->freamheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->freamheight(), target);
  }

  // int32 dowmsample = 4;
  if (this->dowmsample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dowmsample(), target);
  }

  // int32 splitsizex = 5;
  if (this->splitsizex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->splitsizex(), target);
  }

  // int32 splitsizey = 6;
  if (this->splitsizey() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->splitsizey(), target);
  }

  // bool isgpu = 7;
  if (this->isgpu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isgpu(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.RunTimeParam)
  return target;
}

size_t RunTimeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.RunTimeParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 threadnum = 1;
  if (this->threadnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threadnum());
  }

  // int32 freamwidth = 2;
  if (this->freamwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->freamwidth());
  }

  // int32 freamheight = 3;
  if (this->freamheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->freamheight());
  }

  // int32 dowmsample = 4;
  if (this->dowmsample() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dowmsample());
  }

  // int32 splitsizex = 5;
  if (this->splitsizex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->splitsizex());
  }

  // int32 splitsizey = 6;
  if (this->splitsizey() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->splitsizey());
  }

  // bool isgpu = 7;
  if (this->isgpu() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunTimeParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.RunTimeParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RunTimeParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunTimeParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.RunTimeParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.RunTimeParam)
    MergeFrom(*source);
  }
}

void RunTimeParam::MergeFrom(const RunTimeParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.RunTimeParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.threadnum() != 0) {
    set_threadnum(from.threadnum());
  }
  if (from.freamwidth() != 0) {
    set_freamwidth(from.freamwidth());
  }
  if (from.freamheight() != 0) {
    set_freamheight(from.freamheight());
  }
  if (from.dowmsample() != 0) {
    set_dowmsample(from.dowmsample());
  }
  if (from.splitsizex() != 0) {
    set_splitsizex(from.splitsizex());
  }
  if (from.splitsizey() != 0) {
    set_splitsizey(from.splitsizey());
  }
  if (from.isgpu() != 0) {
    set_isgpu(from.isgpu());
  }
}

void RunTimeParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.RunTimeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunTimeParam::CopyFrom(const RunTimeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.RunTimeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunTimeParam::IsInitialized() const {
  return true;
}

void RunTimeParam::Swap(RunTimeParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunTimeParam::InternalSwap(RunTimeParam* other) {
  using std::swap;
  swap(threadnum_, other->threadnum_);
  swap(freamwidth_, other->freamwidth_);
  swap(freamheight_, other->freamheight_);
  swap(dowmsample_, other->dowmsample_);
  swap(splitsizex_, other->splitsizex_);
  swap(splitsizey_, other->splitsizey_);
  swap(isgpu_, other->isgpu_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunTimeParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SystemRectifyParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemRectifyParam::kXphysicresolutionFieldNumber;
const int SystemRectifyParam::kYphysicresolutionFieldNumber;
const int SystemRectifyParam::kLengthPerFreamFieldNumber;
const int SystemRectifyParam::kRectifyparamfilepathFieldNumber;
const int SystemRectifyParam::kOffsetYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemRectifyParam::SystemRectifyParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSystemRectifyParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Parameters.SystemRectifyParam)
}
SystemRectifyParam::SystemRectifyParam(const SystemRectifyParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rectifyparamfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rectifyparamfilepath().size() > 0) {
    rectifyparamfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rectifyparamfilepath_);
  }
  ::memcpy(&xphysicresolution_, &from.xphysicresolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&offsety_) -
    reinterpret_cast<char*>(&xphysicresolution_)) + sizeof(offsety_));
  // @@protoc_insertion_point(copy_constructor:Parameters.SystemRectifyParam)
}

void SystemRectifyParam::SharedCtor() {
  rectifyparamfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xphysicresolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsety_) -
      reinterpret_cast<char*>(&xphysicresolution_)) + sizeof(offsety_));
  _cached_size_ = 0;
}

SystemRectifyParam::~SystemRectifyParam() {
  // @@protoc_insertion_point(destructor:Parameters.SystemRectifyParam)
  SharedDtor();
}

void SystemRectifyParam::SharedDtor() {
  rectifyparamfilepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemRectifyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemRectifyParam::descriptor() {
  ::protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemRectifyParam& SystemRectifyParam::default_instance() {
  ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSystemRectifyParam();
  return *internal_default_instance();
}

SystemRectifyParam* SystemRectifyParam::New(::google::protobuf::Arena* arena) const {
  SystemRectifyParam* n = new SystemRectifyParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemRectifyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:Parameters.SystemRectifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rectifyparamfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xphysicresolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offsety_) -
      reinterpret_cast<char*>(&xphysicresolution_)) + sizeof(offsety_));
  _internal_metadata_.Clear();
}

bool SystemRectifyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Parameters.SystemRectifyParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float xphysicresolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xphysicresolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lengthPerFream = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lengthperfream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yphysicresolution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yphysicresolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rectifyparamfilepath = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rectifyparamfilepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rectifyparamfilepath().data(), static_cast<int>(this->rectifyparamfilepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Parameters.SystemRectifyParam.rectifyparamfilepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 offsetY = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offsety_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Parameters.SystemRectifyParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Parameters.SystemRectifyParam)
  return false;
#undef DO_
}

void SystemRectifyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Parameters.SystemRectifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float xphysicresolution = 1;
  if (this->xphysicresolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xphysicresolution(), output);
  }

  // float lengthPerFream = 2;
  if (this->lengthperfream() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lengthperfream(), output);
  }

  // float yphysicresolution = 3;
  if (this->yphysicresolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yphysicresolution(), output);
  }

  // string rectifyparamfilepath = 4;
  if (this->rectifyparamfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rectifyparamfilepath().data(), static_cast<int>(this->rectifyparamfilepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SystemRectifyParam.rectifyparamfilepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rectifyparamfilepath(), output);
  }

  // int32 offsetY = 5;
  if (this->offsety() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->offsety(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Parameters.SystemRectifyParam)
}

::google::protobuf::uint8* SystemRectifyParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Parameters.SystemRectifyParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float xphysicresolution = 1;
  if (this->xphysicresolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xphysicresolution(), target);
  }

  // float lengthPerFream = 2;
  if (this->lengthperfream() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lengthperfream(), target);
  }

  // float yphysicresolution = 3;
  if (this->yphysicresolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yphysicresolution(), target);
  }

  // string rectifyparamfilepath = 4;
  if (this->rectifyparamfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rectifyparamfilepath().data(), static_cast<int>(this->rectifyparamfilepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Parameters.SystemRectifyParam.rectifyparamfilepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rectifyparamfilepath(), target);
  }

  // int32 offsetY = 5;
  if (this->offsety() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->offsety(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Parameters.SystemRectifyParam)
  return target;
}

size_t SystemRectifyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Parameters.SystemRectifyParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string rectifyparamfilepath = 4;
  if (this->rectifyparamfilepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rectifyparamfilepath());
  }

  // float xphysicresolution = 1;
  if (this->xphysicresolution() != 0) {
    total_size += 1 + 4;
  }

  // float lengthPerFream = 2;
  if (this->lengthperfream() != 0) {
    total_size += 1 + 4;
  }

  // float yphysicresolution = 3;
  if (this->yphysicresolution() != 0) {
    total_size += 1 + 4;
  }

  // int32 offsetY = 5;
  if (this->offsety() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offsety());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemRectifyParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Parameters.SystemRectifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemRectifyParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemRectifyParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Parameters.SystemRectifyParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Parameters.SystemRectifyParam)
    MergeFrom(*source);
  }
}

void SystemRectifyParam::MergeFrom(const SystemRectifyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Parameters.SystemRectifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rectifyparamfilepath().size() > 0) {

    rectifyparamfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rectifyparamfilepath_);
  }
  if (from.xphysicresolution() != 0) {
    set_xphysicresolution(from.xphysicresolution());
  }
  if (from.lengthperfream() != 0) {
    set_lengthperfream(from.lengthperfream());
  }
  if (from.yphysicresolution() != 0) {
    set_yphysicresolution(from.yphysicresolution());
  }
  if (from.offsety() != 0) {
    set_offsety(from.offsety());
  }
}

void SystemRectifyParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Parameters.SystemRectifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemRectifyParam::CopyFrom(const SystemRectifyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Parameters.SystemRectifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemRectifyParam::IsInitialized() const {
  return true;
}

void SystemRectifyParam::Swap(SystemRectifyParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemRectifyParam::InternalSwap(SystemRectifyParam* other) {
  using std::swap;
  rectifyparamfilepath_.Swap(&other->rectifyparamfilepath_);
  swap(xphysicresolution_, other->xphysicresolution_);
  swap(lengthperfream_, other->lengthperfream_);
  swap(yphysicresolution_, other->yphysicresolution_);
  swap(offsety_, other->offsety_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemRectifyParam::GetMetadata() const {
  protobuf_proto_2fcheckparam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcheckparam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Parameters

// @@protoc_insertion_point(global_scope)
