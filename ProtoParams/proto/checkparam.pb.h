// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/checkparam.proto

#ifndef PROTOBUF_proto_2fcheckparam_2eproto__INCLUDED
#define PROTOBUF_proto_2fcheckparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fcheckparam_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGaussianParamImpl();
void InitDefaultsGaussianParam();
void InitDefaultsDOGparamImpl();
void InitDefaultsDOGparam();
void InitDefaultsMAXMINparmImpl();
void InitDefaultsMAXMINparm();
void InitDefaultsEXPVARparamImpl();
void InitDefaultsEXPVARparam();
void InitDefaultsGeoClassifiyParamImpl();
void InitDefaultsGeoClassifiyParam();
void InitDefaultsSVMClassifyParam_DefectlabelnameEntry_DoNotUseImpl();
void InitDefaultsSVMClassifyParam_DefectlabelnameEntry_DoNotUse();
void InitDefaultsSVMClassifyParamImpl();
void InitDefaultsSVMClassifyParam();
void InitDefaultsDTreeClassifyParam_DefectlabelnameEntry_DoNotUseImpl();
void InitDefaultsDTreeClassifyParam_DefectlabelnameEntry_DoNotUse();
void InitDefaultsDTreeClassifyParamImpl();
void InitDefaultsDTreeClassifyParam();
void InitDefaultsCaffeClassifyParam_DefectlabelnameEntry_DoNotUseImpl();
void InitDefaultsCaffeClassifyParam_DefectlabelnameEntry_DoNotUse();
void InitDefaultsCaffeClassifyParamImpl();
void InitDefaultsCaffeClassifyParam();
void InitDefaultsBoundSearchParamImpl();
void InitDefaultsBoundSearchParam();
void InitDefaultsInspectParamImpl();
void InitDefaultsInspectParam();
void InitDefaultsStripParamImpl();
void InitDefaultsStripParam();
void InitDefaultsSheetInfoImpl();
void InitDefaultsSheetInfo();
void InitDefaultsRunTimeParamImpl();
void InitDefaultsRunTimeParam();
void InitDefaultsSystemRectifyParamImpl();
void InitDefaultsSystemRectifyParam();
inline void InitDefaults() {
  InitDefaultsGaussianParam();
  InitDefaultsDOGparam();
  InitDefaultsMAXMINparm();
  InitDefaultsEXPVARparam();
  InitDefaultsGeoClassifiyParam();
  InitDefaultsSVMClassifyParam_DefectlabelnameEntry_DoNotUse();
  InitDefaultsSVMClassifyParam();
  InitDefaultsDTreeClassifyParam_DefectlabelnameEntry_DoNotUse();
  InitDefaultsDTreeClassifyParam();
  InitDefaultsCaffeClassifyParam_DefectlabelnameEntry_DoNotUse();
  InitDefaultsCaffeClassifyParam();
  InitDefaultsBoundSearchParam();
  InitDefaultsInspectParam();
  InitDefaultsStripParam();
  InitDefaultsSheetInfo();
  InitDefaultsRunTimeParam();
  InitDefaultsSystemRectifyParam();
}
}  // namespace protobuf_proto_2fcheckparam_2eproto
namespace Parameters {
class BoundSearchParam;
class BoundSearchParamDefaultTypeInternal;
extern BoundSearchParamDefaultTypeInternal _BoundSearchParam_default_instance_;
class CaffeClassifyParam;
class CaffeClassifyParamDefaultTypeInternal;
extern CaffeClassifyParamDefaultTypeInternal _CaffeClassifyParam_default_instance_;
class CaffeClassifyParam_DefectlabelnameEntry_DoNotUse;
class CaffeClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal;
extern CaffeClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal _CaffeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
class DOGparam;
class DOGparamDefaultTypeInternal;
extern DOGparamDefaultTypeInternal _DOGparam_default_instance_;
class DTreeClassifyParam;
class DTreeClassifyParamDefaultTypeInternal;
extern DTreeClassifyParamDefaultTypeInternal _DTreeClassifyParam_default_instance_;
class DTreeClassifyParam_DefectlabelnameEntry_DoNotUse;
class DTreeClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal;
extern DTreeClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal _DTreeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
class EXPVARparam;
class EXPVARparamDefaultTypeInternal;
extern EXPVARparamDefaultTypeInternal _EXPVARparam_default_instance_;
class GaussianParam;
class GaussianParamDefaultTypeInternal;
extern GaussianParamDefaultTypeInternal _GaussianParam_default_instance_;
class GeoClassifiyParam;
class GeoClassifiyParamDefaultTypeInternal;
extern GeoClassifiyParamDefaultTypeInternal _GeoClassifiyParam_default_instance_;
class InspectParam;
class InspectParamDefaultTypeInternal;
extern InspectParamDefaultTypeInternal _InspectParam_default_instance_;
class MAXMINparm;
class MAXMINparmDefaultTypeInternal;
extern MAXMINparmDefaultTypeInternal _MAXMINparm_default_instance_;
class RunTimeParam;
class RunTimeParamDefaultTypeInternal;
extern RunTimeParamDefaultTypeInternal _RunTimeParam_default_instance_;
class SVMClassifyParam;
class SVMClassifyParamDefaultTypeInternal;
extern SVMClassifyParamDefaultTypeInternal _SVMClassifyParam_default_instance_;
class SVMClassifyParam_DefectlabelnameEntry_DoNotUse;
class SVMClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal;
extern SVMClassifyParam_DefectlabelnameEntry_DoNotUseDefaultTypeInternal _SVMClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_;
class SheetInfo;
class SheetInfoDefaultTypeInternal;
extern SheetInfoDefaultTypeInternal _SheetInfo_default_instance_;
class StripParam;
class StripParamDefaultTypeInternal;
extern StripParamDefaultTypeInternal _StripParam_default_instance_;
class SystemRectifyParam;
class SystemRectifyParamDefaultTypeInternal;
extern SystemRectifyParamDefaultTypeInternal _SystemRectifyParam_default_instance_;
}  // namespace Parameters
namespace Parameters {

enum InspectParam_CheckType {
  InspectParam_CheckType_DOG = 0,
  InspectParam_CheckType_MAXMIN = 1,
  InspectParam_CheckType_EXPVAR = 2,
  InspectParam_CheckType_InspectParam_CheckType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InspectParam_CheckType_InspectParam_CheckType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InspectParam_CheckType_IsValid(int value);
const InspectParam_CheckType InspectParam_CheckType_CheckType_MIN = InspectParam_CheckType_DOG;
const InspectParam_CheckType InspectParam_CheckType_CheckType_MAX = InspectParam_CheckType_EXPVAR;
const int InspectParam_CheckType_CheckType_ARRAYSIZE = InspectParam_CheckType_CheckType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InspectParam_CheckType_descriptor();
inline const ::std::string& InspectParam_CheckType_Name(InspectParam_CheckType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InspectParam_CheckType_descriptor(), value);
}
inline bool InspectParam_CheckType_Parse(
    const ::std::string& name, InspectParam_CheckType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InspectParam_CheckType>(
    InspectParam_CheckType_descriptor(), name, value);
}
enum InspectParam_ClassifictionType {
  InspectParam_ClassifictionType_Geometry = 0,
  InspectParam_ClassifictionType_SVM = 1,
  InspectParam_ClassifictionType_DTREE = 2,
  InspectParam_ClassifictionType_CAFFE = 3,
  InspectParam_ClassifictionType_InspectParam_ClassifictionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InspectParam_ClassifictionType_InspectParam_ClassifictionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InspectParam_ClassifictionType_IsValid(int value);
const InspectParam_ClassifictionType InspectParam_ClassifictionType_ClassifictionType_MIN = InspectParam_ClassifictionType_Geometry;
const InspectParam_ClassifictionType InspectParam_ClassifictionType_ClassifictionType_MAX = InspectParam_ClassifictionType_CAFFE;
const int InspectParam_ClassifictionType_ClassifictionType_ARRAYSIZE = InspectParam_ClassifictionType_ClassifictionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InspectParam_ClassifictionType_descriptor();
inline const ::std::string& InspectParam_ClassifictionType_Name(InspectParam_ClassifictionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InspectParam_ClassifictionType_descriptor(), value);
}
inline bool InspectParam_ClassifictionType_Parse(
    const ::std::string& name, InspectParam_ClassifictionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InspectParam_ClassifictionType>(
    InspectParam_ClassifictionType_descriptor(), name, value);
}
// ===================================================================

class GaussianParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.GaussianParam) */ {
 public:
  GaussianParam();
  virtual ~GaussianParam();

  GaussianParam(const GaussianParam& from);

  inline GaussianParam& operator=(const GaussianParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GaussianParam(GaussianParam&& from) noexcept
    : GaussianParam() {
    *this = ::std::move(from);
  }

  inline GaussianParam& operator=(GaussianParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GaussianParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaussianParam* internal_default_instance() {
    return reinterpret_cast<const GaussianParam*>(
               &_GaussianParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GaussianParam* other);
  friend void swap(GaussianParam& a, GaussianParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GaussianParam* New() const PROTOBUF_FINAL { return New(NULL); }

  GaussianParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GaussianParam& from);
  void MergeFrom(const GaussianParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GaussianParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string KernelName = 4;
  void clear_kernelname();
  static const int kKernelNameFieldNumber = 4;
  const ::std::string& kernelname() const;
  void set_kernelname(const ::std::string& value);
  #if LANG_CXX11
  void set_kernelname(::std::string&& value);
  #endif
  void set_kernelname(const char* value);
  void set_kernelname(const char* value, size_t size);
  ::std::string* mutable_kernelname();
  ::std::string* release_kernelname();
  void set_allocated_kernelname(::std::string* kernelname);

  // int32 sizex = 1;
  void clear_sizex();
  static const int kSizexFieldNumber = 1;
  ::google::protobuf::int32 sizex() const;
  void set_sizex(::google::protobuf::int32 value);

  // int32 sizey = 2;
  void clear_sizey();
  static const int kSizeyFieldNumber = 2;
  ::google::protobuf::int32 sizey() const;
  void set_sizey(::google::protobuf::int32 value);

  // float sigma = 3;
  void clear_sigma();
  static const int kSigmaFieldNumber = 3;
  float sigma() const;
  void set_sigma(float value);

  // @@protoc_insertion_point(class_scope:Parameters.GaussianParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kernelname_;
  ::google::protobuf::int32 sizex_;
  ::google::protobuf::int32 sizey_;
  float sigma_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsGaussianParamImpl();
};
// -------------------------------------------------------------------

class DOGparam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.DOGparam) */ {
 public:
  DOGparam();
  virtual ~DOGparam();

  DOGparam(const DOGparam& from);

  inline DOGparam& operator=(const DOGparam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DOGparam(DOGparam&& from) noexcept
    : DOGparam() {
    *this = ::std::move(from);
  }

  inline DOGparam& operator=(DOGparam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DOGparam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DOGparam* internal_default_instance() {
    return reinterpret_cast<const DOGparam*>(
               &_DOGparam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DOGparam* other);
  friend void swap(DOGparam& a, DOGparam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DOGparam* New() const PROTOBUF_FINAL { return New(NULL); }

  DOGparam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DOGparam& from);
  void MergeFrom(const DOGparam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DOGparam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Parameters.GaussianParam refKernel = 2;
  bool has_refkernel() const;
  void clear_refkernel();
  static const int kRefKernelFieldNumber = 2;
  const ::Parameters::GaussianParam& refkernel() const;
  ::Parameters::GaussianParam* release_refkernel();
  ::Parameters::GaussianParam* mutable_refkernel();
  void set_allocated_refkernel(::Parameters::GaussianParam* refkernel);

  // int32 thresholddark = 3;
  void clear_thresholddark();
  static const int kThresholddarkFieldNumber = 3;
  ::google::protobuf::int32 thresholddark() const;
  void set_thresholddark(::google::protobuf::int32 value);

  // int32 thresholdlight = 4;
  void clear_thresholdlight();
  static const int kThresholdlightFieldNumber = 4;
  ::google::protobuf::int32 thresholdlight() const;
  void set_thresholdlight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Parameters.DOGparam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Parameters::GaussianParam* refkernel_;
  ::google::protobuf::int32 thresholddark_;
  ::google::protobuf::int32 thresholdlight_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsDOGparamImpl();
};
// -------------------------------------------------------------------

class MAXMINparm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.MAXMINparm) */ {
 public:
  MAXMINparm();
  virtual ~MAXMINparm();

  MAXMINparm(const MAXMINparm& from);

  inline MAXMINparm& operator=(const MAXMINparm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MAXMINparm(MAXMINparm&& from) noexcept
    : MAXMINparm() {
    *this = ::std::move(from);
  }

  inline MAXMINparm& operator=(MAXMINparm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MAXMINparm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MAXMINparm* internal_default_instance() {
    return reinterpret_cast<const MAXMINparm*>(
               &_MAXMINparm_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MAXMINparm* other);
  friend void swap(MAXMINparm& a, MAXMINparm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MAXMINparm* New() const PROTOBUF_FINAL { return New(NULL); }

  MAXMINparm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MAXMINparm& from);
  void MergeFrom(const MAXMINparm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MAXMINparm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 threshigh = 1;
  void clear_threshigh();
  static const int kThreshighFieldNumber = 1;
  ::google::protobuf::int32 threshigh() const;
  void set_threshigh(::google::protobuf::int32 value);

  // int32 threshlow = 2;
  void clear_threshlow();
  static const int kThreshlowFieldNumber = 2;
  ::google::protobuf::int32 threshlow() const;
  void set_threshlow(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Parameters.MAXMINparm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 threshigh_;
  ::google::protobuf::int32 threshlow_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsMAXMINparmImpl();
};
// -------------------------------------------------------------------

class EXPVARparam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.EXPVARparam) */ {
 public:
  EXPVARparam();
  virtual ~EXPVARparam();

  EXPVARparam(const EXPVARparam& from);

  inline EXPVARparam& operator=(const EXPVARparam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EXPVARparam(EXPVARparam&& from) noexcept
    : EXPVARparam() {
    *this = ::std::move(from);
  }

  inline EXPVARparam& operator=(EXPVARparam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EXPVARparam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EXPVARparam* internal_default_instance() {
    return reinterpret_cast<const EXPVARparam*>(
               &_EXPVARparam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EXPVARparam* other);
  friend void swap(EXPVARparam& a, EXPVARparam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EXPVARparam* New() const PROTOBUF_FINAL { return New(NULL); }

  EXPVARparam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EXPVARparam& from);
  void MergeFrom(const EXPVARparam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EXPVARparam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float sigmatime = 1;
  void clear_sigmatime();
  static const int kSigmatimeFieldNumber = 1;
  float sigmatime() const;
  void set_sigmatime(float value);

  // @@protoc_insertion_point(class_scope:Parameters.EXPVARparam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float sigmatime_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsEXPVARparamImpl();
};
// -------------------------------------------------------------------

class GeoClassifiyParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.GeoClassifiyParam) */ {
 public:
  GeoClassifiyParam();
  virtual ~GeoClassifiyParam();

  GeoClassifiyParam(const GeoClassifiyParam& from);

  inline GeoClassifiyParam& operator=(const GeoClassifiyParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoClassifiyParam(GeoClassifiyParam&& from) noexcept
    : GeoClassifiyParam() {
    *this = ::std::move(from);
  }

  inline GeoClassifiyParam& operator=(GeoClassifiyParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoClassifiyParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoClassifiyParam* internal_default_instance() {
    return reinterpret_cast<const GeoClassifiyParam*>(
               &_GeoClassifiyParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GeoClassifiyParam* other);
  friend void swap(GeoClassifiyParam& a, GeoClassifiyParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoClassifiyParam* New() const PROTOBUF_FINAL { return New(NULL); }

  GeoClassifiyParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeoClassifiyParam& from);
  void MergeFrom(const GeoClassifiyParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeoClassifiyParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string defectname = 9;
  void clear_defectname();
  static const int kDefectnameFieldNumber = 9;
  const ::std::string& defectname() const;
  void set_defectname(const ::std::string& value);
  #if LANG_CXX11
  void set_defectname(::std::string&& value);
  #endif
  void set_defectname(const char* value);
  void set_defectname(const char* value, size_t size);
  ::std::string* mutable_defectname();
  ::std::string* release_defectname();
  void set_allocated_defectname(::std::string* defectname);

  // float minheight = 1;
  void clear_minheight();
  static const int kMinheightFieldNumber = 1;
  float minheight() const;
  void set_minheight(float value);

  // float maxheight = 2;
  void clear_maxheight();
  static const int kMaxheightFieldNumber = 2;
  float maxheight() const;
  void set_maxheight(float value);

  // float minwidth = 3;
  void clear_minwidth();
  static const int kMinwidthFieldNumber = 3;
  float minwidth() const;
  void set_minwidth(float value);

  // float maxwidth = 4;
  void clear_maxwidth();
  static const int kMaxwidthFieldNumber = 4;
  float maxwidth() const;
  void set_maxwidth(float value);

  // sint32 mindiff = 5;
  void clear_mindiff();
  static const int kMindiffFieldNumber = 5;
  ::google::protobuf::int32 mindiff() const;
  void set_mindiff(::google::protobuf::int32 value);

  // sint32 maxdiff = 6;
  void clear_maxdiff();
  static const int kMaxdiffFieldNumber = 6;
  ::google::protobuf::int32 maxdiff() const;
  void set_maxdiff(::google::protobuf::int32 value);

  // float minarea = 7;
  void clear_minarea();
  static const int kMinareaFieldNumber = 7;
  float minarea() const;
  void set_minarea(float value);

  // float maxarea = 8;
  void clear_maxarea();
  static const int kMaxareaFieldNumber = 8;
  float maxarea() const;
  void set_maxarea(float value);

  // int32 iconid = 10;
  void clear_iconid();
  static const int kIconidFieldNumber = 10;
  ::google::protobuf::int32 iconid() const;
  void set_iconid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Parameters.GeoClassifiyParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr defectname_;
  float minheight_;
  float maxheight_;
  float minwidth_;
  float maxwidth_;
  ::google::protobuf::int32 mindiff_;
  ::google::protobuf::int32 maxdiff_;
  float minarea_;
  float maxarea_;
  ::google::protobuf::int32 iconid_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsGeoClassifiyParamImpl();
};
// -------------------------------------------------------------------

class SVMClassifyParam_DefectlabelnameEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SVMClassifyParam_DefectlabelnameEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SVMClassifyParam_DefectlabelnameEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SVMClassifyParam_DefectlabelnameEntry_DoNotUse();
  SVMClassifyParam_DefectlabelnameEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SVMClassifyParam_DefectlabelnameEntry_DoNotUse& other);
  static const SVMClassifyParam_DefectlabelnameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SVMClassifyParam_DefectlabelnameEntry_DoNotUse*>(&_SVMClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SVMClassifyParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.SVMClassifyParam) */ {
 public:
  SVMClassifyParam();
  virtual ~SVMClassifyParam();

  SVMClassifyParam(const SVMClassifyParam& from);

  inline SVMClassifyParam& operator=(const SVMClassifyParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVMClassifyParam(SVMClassifyParam&& from) noexcept
    : SVMClassifyParam() {
    *this = ::std::move(from);
  }

  inline SVMClassifyParam& operator=(SVMClassifyParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SVMClassifyParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVMClassifyParam* internal_default_instance() {
    return reinterpret_cast<const SVMClassifyParam*>(
               &_SVMClassifyParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SVMClassifyParam* other);
  friend void swap(SVMClassifyParam& a, SVMClassifyParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVMClassifyParam* New() const PROTOBUF_FINAL { return New(NULL); }

  SVMClassifyParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SVMClassifyParam& from);
  void MergeFrom(const SVMClassifyParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SVMClassifyParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, string> defectlabelname = 2;
  int defectlabelname_size() const;
  void clear_defectlabelname();
  static const int kDefectlabelnameFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
      defectlabelname() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
      mutable_defectlabelname();

  // string modelPath = 1;
  void clear_modelpath();
  static const int kModelPathFieldNumber = 1;
  const ::std::string& modelpath() const;
  void set_modelpath(const ::std::string& value);
  #if LANG_CXX11
  void set_modelpath(::std::string&& value);
  #endif
  void set_modelpath(const char* value);
  void set_modelpath(const char* value, size_t size);
  ::std::string* mutable_modelpath();
  ::std::string* release_modelpath();
  void set_allocated_modelpath(::std::string* modelpath);

  // @@protoc_insertion_point(class_scope:Parameters.SVMClassifyParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SVMClassifyParam_DefectlabelnameEntry_DoNotUse,
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > defectlabelname_;
  ::google::protobuf::internal::ArenaStringPtr modelpath_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSVMClassifyParamImpl();
};
// -------------------------------------------------------------------

class DTreeClassifyParam_DefectlabelnameEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<DTreeClassifyParam_DefectlabelnameEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<DTreeClassifyParam_DefectlabelnameEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DTreeClassifyParam_DefectlabelnameEntry_DoNotUse();
  DTreeClassifyParam_DefectlabelnameEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const DTreeClassifyParam_DefectlabelnameEntry_DoNotUse& other);
  static const DTreeClassifyParam_DefectlabelnameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DTreeClassifyParam_DefectlabelnameEntry_DoNotUse*>(&_DTreeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class DTreeClassifyParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.DTreeClassifyParam) */ {
 public:
  DTreeClassifyParam();
  virtual ~DTreeClassifyParam();

  DTreeClassifyParam(const DTreeClassifyParam& from);

  inline DTreeClassifyParam& operator=(const DTreeClassifyParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DTreeClassifyParam(DTreeClassifyParam&& from) noexcept
    : DTreeClassifyParam() {
    *this = ::std::move(from);
  }

  inline DTreeClassifyParam& operator=(DTreeClassifyParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DTreeClassifyParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DTreeClassifyParam* internal_default_instance() {
    return reinterpret_cast<const DTreeClassifyParam*>(
               &_DTreeClassifyParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DTreeClassifyParam* other);
  friend void swap(DTreeClassifyParam& a, DTreeClassifyParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DTreeClassifyParam* New() const PROTOBUF_FINAL { return New(NULL); }

  DTreeClassifyParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DTreeClassifyParam& from);
  void MergeFrom(const DTreeClassifyParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DTreeClassifyParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, string> defectlabelname = 2;
  int defectlabelname_size() const;
  void clear_defectlabelname();
  static const int kDefectlabelnameFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
      defectlabelname() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
      mutable_defectlabelname();

  // string modelPath = 1;
  void clear_modelpath();
  static const int kModelPathFieldNumber = 1;
  const ::std::string& modelpath() const;
  void set_modelpath(const ::std::string& value);
  #if LANG_CXX11
  void set_modelpath(::std::string&& value);
  #endif
  void set_modelpath(const char* value);
  void set_modelpath(const char* value, size_t size);
  ::std::string* mutable_modelpath();
  ::std::string* release_modelpath();
  void set_allocated_modelpath(::std::string* modelpath);

  // @@protoc_insertion_point(class_scope:Parameters.DTreeClassifyParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      DTreeClassifyParam_DefectlabelnameEntry_DoNotUse,
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > defectlabelname_;
  ::google::protobuf::internal::ArenaStringPtr modelpath_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsDTreeClassifyParamImpl();
};
// -------------------------------------------------------------------

class CaffeClassifyParam_DefectlabelnameEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CaffeClassifyParam_DefectlabelnameEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CaffeClassifyParam_DefectlabelnameEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CaffeClassifyParam_DefectlabelnameEntry_DoNotUse();
  CaffeClassifyParam_DefectlabelnameEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CaffeClassifyParam_DefectlabelnameEntry_DoNotUse& other);
  static const CaffeClassifyParam_DefectlabelnameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CaffeClassifyParam_DefectlabelnameEntry_DoNotUse*>(&_CaffeClassifyParam_DefectlabelnameEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CaffeClassifyParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.CaffeClassifyParam) */ {
 public:
  CaffeClassifyParam();
  virtual ~CaffeClassifyParam();

  CaffeClassifyParam(const CaffeClassifyParam& from);

  inline CaffeClassifyParam& operator=(const CaffeClassifyParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CaffeClassifyParam(CaffeClassifyParam&& from) noexcept
    : CaffeClassifyParam() {
    *this = ::std::move(from);
  }

  inline CaffeClassifyParam& operator=(CaffeClassifyParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CaffeClassifyParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaffeClassifyParam* internal_default_instance() {
    return reinterpret_cast<const CaffeClassifyParam*>(
               &_CaffeClassifyParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CaffeClassifyParam* other);
  friend void swap(CaffeClassifyParam& a, CaffeClassifyParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CaffeClassifyParam* New() const PROTOBUF_FINAL { return New(NULL); }

  CaffeClassifyParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CaffeClassifyParam& from);
  void MergeFrom(const CaffeClassifyParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CaffeClassifyParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, string> defectlabelname = 2;
  int defectlabelname_size() const;
  void clear_defectlabelname();
  static const int kDefectlabelnameFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
      defectlabelname() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
      mutable_defectlabelname();

  // string modelPath = 1;
  void clear_modelpath();
  static const int kModelPathFieldNumber = 1;
  const ::std::string& modelpath() const;
  void set_modelpath(const ::std::string& value);
  #if LANG_CXX11
  void set_modelpath(::std::string&& value);
  #endif
  void set_modelpath(const char* value);
  void set_modelpath(const char* value, size_t size);
  ::std::string* mutable_modelpath();
  ::std::string* release_modelpath();
  void set_allocated_modelpath(::std::string* modelpath);

  // @@protoc_insertion_point(class_scope:Parameters.CaffeClassifyParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      CaffeClassifyParam_DefectlabelnameEntry_DoNotUse,
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > defectlabelname_;
  ::google::protobuf::internal::ArenaStringPtr modelpath_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsCaffeClassifyParamImpl();
};
// -------------------------------------------------------------------

class BoundSearchParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.BoundSearchParam) */ {
 public:
  BoundSearchParam();
  virtual ~BoundSearchParam();

  BoundSearchParam(const BoundSearchParam& from);

  inline BoundSearchParam& operator=(const BoundSearchParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoundSearchParam(BoundSearchParam&& from) noexcept
    : BoundSearchParam() {
    *this = ::std::move(from);
  }

  inline BoundSearchParam& operator=(BoundSearchParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundSearchParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundSearchParam* internal_default_instance() {
    return reinterpret_cast<const BoundSearchParam*>(
               &_BoundSearchParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(BoundSearchParam* other);
  friend void swap(BoundSearchParam& a, BoundSearchParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoundSearchParam* New() const PROTOBUF_FINAL { return New(NULL); }

  BoundSearchParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoundSearchParam& from);
  void MergeFrom(const BoundSearchParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoundSearchParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float leftRange1 = 1;
  void clear_leftrange1();
  static const int kLeftRange1FieldNumber = 1;
  float leftrange1() const;
  void set_leftrange1(float value);

  // float leftRange2 = 2;
  void clear_leftrange2();
  static const int kLeftRange2FieldNumber = 2;
  float leftrange2() const;
  void set_leftrange2(float value);

  // float rightRange1 = 3;
  void clear_rightrange1();
  static const int kRightRange1FieldNumber = 3;
  float rightrange1() const;
  void set_rightrange1(float value);

  // float rightRange2 = 4;
  void clear_rightrange2();
  static const int kRightRange2FieldNumber = 4;
  float rightrange2() const;
  void set_rightrange2(float value);

  // @@protoc_insertion_point(class_scope:Parameters.BoundSearchParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float leftrange1_;
  float leftrange2_;
  float rightrange1_;
  float rightrange2_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsBoundSearchParamImpl();
};
// -------------------------------------------------------------------

class InspectParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.InspectParam) */ {
 public:
  InspectParam();
  virtual ~InspectParam();

  InspectParam(const InspectParam& from);

  inline InspectParam& operator=(const InspectParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InspectParam(InspectParam&& from) noexcept
    : InspectParam() {
    *this = ::std::move(from);
  }

  inline InspectParam& operator=(InspectParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InspectParam* internal_default_instance() {
    return reinterpret_cast<const InspectParam*>(
               &_InspectParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(InspectParam* other);
  friend void swap(InspectParam& a, InspectParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InspectParam* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectParam& from);
  void MergeFrom(const InspectParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef InspectParam_CheckType CheckType;
  static const CheckType DOG =
    InspectParam_CheckType_DOG;
  static const CheckType MAXMIN =
    InspectParam_CheckType_MAXMIN;
  static const CheckType EXPVAR =
    InspectParam_CheckType_EXPVAR;
  static inline bool CheckType_IsValid(int value) {
    return InspectParam_CheckType_IsValid(value);
  }
  static const CheckType CheckType_MIN =
    InspectParam_CheckType_CheckType_MIN;
  static const CheckType CheckType_MAX =
    InspectParam_CheckType_CheckType_MAX;
  static const int CheckType_ARRAYSIZE =
    InspectParam_CheckType_CheckType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CheckType_descriptor() {
    return InspectParam_CheckType_descriptor();
  }
  static inline const ::std::string& CheckType_Name(CheckType value) {
    return InspectParam_CheckType_Name(value);
  }
  static inline bool CheckType_Parse(const ::std::string& name,
      CheckType* value) {
    return InspectParam_CheckType_Parse(name, value);
  }

  typedef InspectParam_ClassifictionType ClassifictionType;
  static const ClassifictionType Geometry =
    InspectParam_ClassifictionType_Geometry;
  static const ClassifictionType SVM =
    InspectParam_ClassifictionType_SVM;
  static const ClassifictionType DTREE =
    InspectParam_ClassifictionType_DTREE;
  static const ClassifictionType CAFFE =
    InspectParam_ClassifictionType_CAFFE;
  static inline bool ClassifictionType_IsValid(int value) {
    return InspectParam_ClassifictionType_IsValid(value);
  }
  static const ClassifictionType ClassifictionType_MIN =
    InspectParam_ClassifictionType_ClassifictionType_MIN;
  static const ClassifictionType ClassifictionType_MAX =
    InspectParam_ClassifictionType_ClassifictionType_MAX;
  static const int ClassifictionType_ARRAYSIZE =
    InspectParam_ClassifictionType_ClassifictionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ClassifictionType_descriptor() {
    return InspectParam_ClassifictionType_descriptor();
  }
  static inline const ::std::string& ClassifictionType_Name(ClassifictionType value) {
    return InspectParam_ClassifictionType_Name(value);
  }
  static inline bool ClassifictionType_Parse(const ::std::string& name,
      ClassifictionType* value) {
    return InspectParam_ClassifictionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Parameters.BoundSearchParam boundsearchlist = 3;
  int boundsearchlist_size() const;
  void clear_boundsearchlist();
  static const int kBoundsearchlistFieldNumber = 3;
  const ::Parameters::BoundSearchParam& boundsearchlist(int index) const;
  ::Parameters::BoundSearchParam* mutable_boundsearchlist(int index);
  ::Parameters::BoundSearchParam* add_boundsearchlist();
  ::google::protobuf::RepeatedPtrField< ::Parameters::BoundSearchParam >*
      mutable_boundsearchlist();
  const ::google::protobuf::RepeatedPtrField< ::Parameters::BoundSearchParam >&
      boundsearchlist() const;

  // repeated .Parameters.GeoClassifiyParam geoParamlist = 10;
  int geoparamlist_size() const;
  void clear_geoparamlist();
  static const int kGeoParamlistFieldNumber = 10;
  const ::Parameters::GeoClassifiyParam& geoparamlist(int index) const;
  ::Parameters::GeoClassifiyParam* mutable_geoparamlist(int index);
  ::Parameters::GeoClassifiyParam* add_geoparamlist();
  ::google::protobuf::RepeatedPtrField< ::Parameters::GeoClassifiyParam >*
      mutable_geoparamlist();
  const ::google::protobuf::RepeatedPtrField< ::Parameters::GeoClassifiyParam >&
      geoparamlist() const;

  // string savepath = 16;
  void clear_savepath();
  static const int kSavepathFieldNumber = 16;
  const ::std::string& savepath() const;
  void set_savepath(const ::std::string& value);
  #if LANG_CXX11
  void set_savepath(::std::string&& value);
  #endif
  void set_savepath(const char* value);
  void set_savepath(const char* value, size_t size);
  ::std::string* mutable_savepath();
  ::std::string* release_savepath();
  void set_allocated_savepath(::std::string* savepath);

  // string paramname = 17;
  void clear_paramname();
  static const int kParamnameFieldNumber = 17;
  const ::std::string& paramname() const;
  void set_paramname(const ::std::string& value);
  #if LANG_CXX11
  void set_paramname(::std::string&& value);
  #endif
  void set_paramname(const char* value);
  void set_paramname(const char* value, size_t size);
  ::std::string* mutable_paramname();
  ::std::string* release_paramname();
  void set_allocated_paramname(::std::string* paramname);

  // .Parameters.DOGparam dogParam = 5;
  bool has_dogparam() const;
  void clear_dogparam();
  static const int kDogParamFieldNumber = 5;
  const ::Parameters::DOGparam& dogparam() const;
  ::Parameters::DOGparam* release_dogparam();
  ::Parameters::DOGparam* mutable_dogparam();
  void set_allocated_dogparam(::Parameters::DOGparam* dogparam);

  // .Parameters.EXPVARparam expvarParam = 6;
  bool has_expvarparam() const;
  void clear_expvarparam();
  static const int kExpvarParamFieldNumber = 6;
  const ::Parameters::EXPVARparam& expvarparam() const;
  ::Parameters::EXPVARparam* release_expvarparam();
  ::Parameters::EXPVARparam* mutable_expvarparam();
  void set_allocated_expvarparam(::Parameters::EXPVARparam* expvarparam);

  // .Parameters.MAXMINparm maxminParam = 7;
  bool has_maxminparam() const;
  void clear_maxminparam();
  static const int kMaxminParamFieldNumber = 7;
  const ::Parameters::MAXMINparm& maxminparam() const;
  ::Parameters::MAXMINparm* release_maxminparam();
  ::Parameters::MAXMINparm* mutable_maxminparam();
  void set_allocated_maxminparam(::Parameters::MAXMINparm* maxminparam);

  // .Parameters.SVMClassifyParam svmParam = 11;
  bool has_svmparam() const;
  void clear_svmparam();
  static const int kSvmParamFieldNumber = 11;
  const ::Parameters::SVMClassifyParam& svmparam() const;
  ::Parameters::SVMClassifyParam* release_svmparam();
  ::Parameters::SVMClassifyParam* mutable_svmparam();
  void set_allocated_svmparam(::Parameters::SVMClassifyParam* svmparam);

  // .Parameters.DTreeClassifyParam DTreeParam = 12;
  bool has_dtreeparam() const;
  void clear_dtreeparam();
  static const int kDTreeParamFieldNumber = 12;
  const ::Parameters::DTreeClassifyParam& dtreeparam() const;
  ::Parameters::DTreeClassifyParam* release_dtreeparam();
  ::Parameters::DTreeClassifyParam* mutable_dtreeparam();
  void set_allocated_dtreeparam(::Parameters::DTreeClassifyParam* dtreeparam);

  // .Parameters.CaffeClassifyParam CaffeParam = 13;
  bool has_caffeparam() const;
  void clear_caffeparam();
  static const int kCaffeParamFieldNumber = 13;
  const ::Parameters::CaffeClassifyParam& caffeparam() const;
  ::Parameters::CaffeClassifyParam* release_caffeparam();
  ::Parameters::CaffeClassifyParam* mutable_caffeparam();
  void set_allocated_caffeparam(::Parameters::CaffeClassifyParam* caffeparam);

  // int32 dstvaluefrd = 1;
  void clear_dstvaluefrd();
  static const int kDstvaluefrdFieldNumber = 1;
  ::google::protobuf::int32 dstvaluefrd() const;
  void set_dstvaluefrd(::google::protobuf::int32 value);

  // int32 dstvaluebgd = 2;
  void clear_dstvaluebgd();
  static const int kDstvaluebgdFieldNumber = 2;
  ::google::protobuf::int32 dstvaluebgd() const;
  void set_dstvaluebgd(::google::protobuf::int32 value);

  // .Parameters.InspectParam.CheckType checktype = 4;
  void clear_checktype();
  static const int kChecktypeFieldNumber = 4;
  ::Parameters::InspectParam_CheckType checktype() const;
  void set_checktype(::Parameters::InspectParam_CheckType value);

  // float blobThr = 8;
  void clear_blobthr();
  static const int kBlobThrFieldNumber = 8;
  float blobthr() const;
  void set_blobthr(float value);

  // .Parameters.InspectParam.ClassifictionType classificcationtype = 9;
  void clear_classificcationtype();
  static const int kClassificcationtypeFieldNumber = 9;
  ::Parameters::InspectParam_ClassifictionType classificcationtype() const;
  void set_classificcationtype(::Parameters::InspectParam_ClassifictionType value);

  // float exposureTime = 14;
  void clear_exposuretime();
  static const int kExposureTimeFieldNumber = 14;
  float exposuretime() const;
  void set_exposuretime(float value);

  // float gain = 15;
  void clear_gain();
  static const int kGainFieldNumber = 15;
  float gain() const;
  void set_gain(float value);

  // int32 layerType = 18;
  void clear_layertype();
  static const int kLayerTypeFieldNumber = 18;
  ::google::protobuf::int32 layertype() const;
  void set_layertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Parameters.InspectParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Parameters::BoundSearchParam > boundsearchlist_;
  ::google::protobuf::RepeatedPtrField< ::Parameters::GeoClassifiyParam > geoparamlist_;
  ::google::protobuf::internal::ArenaStringPtr savepath_;
  ::google::protobuf::internal::ArenaStringPtr paramname_;
  ::Parameters::DOGparam* dogparam_;
  ::Parameters::EXPVARparam* expvarparam_;
  ::Parameters::MAXMINparm* maxminparam_;
  ::Parameters::SVMClassifyParam* svmparam_;
  ::Parameters::DTreeClassifyParam* dtreeparam_;
  ::Parameters::CaffeClassifyParam* caffeparam_;
  ::google::protobuf::int32 dstvaluefrd_;
  ::google::protobuf::int32 dstvaluebgd_;
  int checktype_;
  float blobthr_;
  int classificcationtype_;
  float exposuretime_;
  float gain_;
  ::google::protobuf::int32 layertype_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsInspectParamImpl();
};
// -------------------------------------------------------------------

class StripParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.StripParam) */ {
 public:
  StripParam();
  virtual ~StripParam();

  StripParam(const StripParam& from);

  inline StripParam& operator=(const StripParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StripParam(StripParam&& from) noexcept
    : StripParam() {
    *this = ::std::move(from);
  }

  inline StripParam& operator=(StripParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StripParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StripParam* internal_default_instance() {
    return reinterpret_cast<const StripParam*>(
               &_StripParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(StripParam* other);
  friend void swap(StripParam& a, StripParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StripParam* New() const PROTOBUF_FINAL { return New(NULL); }

  StripParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StripParam& from);
  void MergeFrom(const StripParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StripParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float stripwidth = 2;
  int stripwidth_size() const;
  void clear_stripwidth();
  static const int kStripwidthFieldNumber = 2;
  float stripwidth(int index) const;
  void set_stripwidth(int index, float value);
  void add_stripwidth(float value);
  const ::google::protobuf::RepeatedField< float >&
      stripwidth() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_stripwidth();

  // float leftoffset = 1;
  void clear_leftoffset();
  static const int kLeftoffsetFieldNumber = 1;
  float leftoffset() const;
  void set_leftoffset(float value);

  // float allwidth = 3;
  void clear_allwidth();
  static const int kAllwidthFieldNumber = 3;
  float allwidth() const;
  void set_allwidth(float value);

  // int32 stripcount = 4;
  void clear_stripcount();
  static const int kStripcountFieldNumber = 4;
  ::google::protobuf::int32 stripcount() const;
  void set_stripcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Parameters.StripParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > stripwidth_;
  mutable int _stripwidth_cached_byte_size_;
  float leftoffset_;
  float allwidth_;
  ::google::protobuf::int32 stripcount_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsStripParamImpl();
};
// -------------------------------------------------------------------

class SheetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.SheetInfo) */ {
 public:
  SheetInfo();
  virtual ~SheetInfo();

  SheetInfo(const SheetInfo& from);

  inline SheetInfo& operator=(const SheetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SheetInfo(SheetInfo&& from) noexcept
    : SheetInfo() {
    *this = ::std::move(from);
  }

  inline SheetInfo& operator=(SheetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SheetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SheetInfo* internal_default_instance() {
    return reinterpret_cast<const SheetInfo*>(
               &_SheetInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SheetInfo* other);
  friend void swap(SheetInfo& a, SheetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SheetInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SheetInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SheetInfo& from);
  void MergeFrom(const SheetInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SheetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string machinenumber = 2;
  void clear_machinenumber();
  static const int kMachinenumberFieldNumber = 2;
  const ::std::string& machinenumber() const;
  void set_machinenumber(const ::std::string& value);
  #if LANG_CXX11
  void set_machinenumber(::std::string&& value);
  #endif
  void set_machinenumber(const char* value);
  void set_machinenumber(const char* value, size_t size);
  ::std::string* mutable_machinenumber();
  ::std::string* release_machinenumber();
  void set_allocated_machinenumber(::std::string* machinenumber);

  // string imageModel = 3;
  void clear_imagemodel();
  static const int kImageModelFieldNumber = 3;
  const ::std::string& imagemodel() const;
  void set_imagemodel(const ::std::string& value);
  #if LANG_CXX11
  void set_imagemodel(::std::string&& value);
  #endif
  void set_imagemodel(const char* value);
  void set_imagemodel(const char* value, size_t size);
  ::std::string* mutable_imagemodel();
  ::std::string* release_imagemodel();
  void set_allocated_imagemodel(::std::string* imagemodel);

  // string prodctname = 4;
  void clear_prodctname();
  static const int kProdctnameFieldNumber = 4;
  const ::std::string& prodctname() const;
  void set_prodctname(const ::std::string& value);
  #if LANG_CXX11
  void set_prodctname(::std::string&& value);
  #endif
  void set_prodctname(const char* value);
  void set_prodctname(const char* value, size_t size);
  ::std::string* mutable_prodctname();
  ::std::string* release_prodctname();
  void set_allocated_prodctname(::std::string* prodctname);

  // string ordernumber = 5;
  void clear_ordernumber();
  static const int kOrdernumberFieldNumber = 5;
  const ::std::string& ordernumber() const;
  void set_ordernumber(const ::std::string& value);
  #if LANG_CXX11
  void set_ordernumber(::std::string&& value);
  #endif
  void set_ordernumber(const char* value);
  void set_ordernumber(const char* value, size_t size);
  ::std::string* mutable_ordernumber();
  ::std::string* release_ordernumber();
  void set_allocated_ordernumber(::std::string* ordernumber);

  // string batchnumber = 6;
  void clear_batchnumber();
  static const int kBatchnumberFieldNumber = 6;
  const ::std::string& batchnumber() const;
  void set_batchnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_batchnumber(::std::string&& value);
  #endif
  void set_batchnumber(const char* value);
  void set_batchnumber(const char* value, size_t size);
  ::std::string* mutable_batchnumber();
  ::std::string* release_batchnumber();
  void set_allocated_batchnumber(::std::string* batchnumber);

  // string inspectparamname = 7;
  void clear_inspectparamname();
  static const int kInspectparamnameFieldNumber = 7;
  const ::std::string& inspectparamname() const;
  void set_inspectparamname(const ::std::string& value);
  #if LANG_CXX11
  void set_inspectparamname(::std::string&& value);
  #endif
  void set_inspectparamname(const char* value);
  void set_inspectparamname(const char* value, size_t size);
  ::std::string* mutable_inspectparamname();
  ::std::string* release_inspectparamname();
  void set_allocated_inspectparamname(::std::string* inspectparamname);

  // string remark = 9;
  void clear_remark();
  static const int kRemarkFieldNumber = 9;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // .Parameters.StripParam stripparam = 8;
  bool has_stripparam() const;
  void clear_stripparam();
  static const int kStripparamFieldNumber = 8;
  const ::Parameters::StripParam& stripparam() const;
  ::Parameters::StripParam* release_stripparam();
  ::Parameters::StripParam* mutable_stripparam();
  void set_allocated_stripparam(::Parameters::StripParam* stripparam);

  // float offsetBoundaryToZero = 10;
  void clear_offsetboundarytozero();
  static const int kOffsetBoundaryToZeroFieldNumber = 10;
  float offsetboundarytozero() const;
  void set_offsetboundarytozero(float value);

  // float startLength = 11;
  void clear_startlength();
  static const int kStartLengthFieldNumber = 11;
  float startlength() const;
  void set_startlength(float value);

  // bool isLeftToRight = 12;
  void clear_islefttoright();
  static const int kIsLeftToRightFieldNumber = 12;
  bool islefttoright() const;
  void set_islefttoright(bool value);

  // float boundOffsetLeft = 13;
  void clear_boundoffsetleft();
  static const int kBoundOffsetLeftFieldNumber = 13;
  float boundoffsetleft() const;
  void set_boundoffsetleft(float value);

  // float boundOffsetRight = 14;
  void clear_boundoffsetright();
  static const int kBoundOffsetRightFieldNumber = 14;
  float boundoffsetright() const;
  void set_boundoffsetright(float value);

  // float productThickness = 15;
  void clear_productthickness();
  static const int kProductThicknessFieldNumber = 15;
  float productthickness() const;
  void set_productthickness(float value);

  // @@protoc_insertion_point(class_scope:Parameters.SheetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr machinenumber_;
  ::google::protobuf::internal::ArenaStringPtr imagemodel_;
  ::google::protobuf::internal::ArenaStringPtr prodctname_;
  ::google::protobuf::internal::ArenaStringPtr ordernumber_;
  ::google::protobuf::internal::ArenaStringPtr batchnumber_;
  ::google::protobuf::internal::ArenaStringPtr inspectparamname_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::Parameters::StripParam* stripparam_;
  float offsetboundarytozero_;
  float startlength_;
  bool islefttoright_;
  float boundoffsetleft_;
  float boundoffsetright_;
  float productthickness_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSheetInfoImpl();
};
// -------------------------------------------------------------------

class RunTimeParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.RunTimeParam) */ {
 public:
  RunTimeParam();
  virtual ~RunTimeParam();

  RunTimeParam(const RunTimeParam& from);

  inline RunTimeParam& operator=(const RunTimeParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunTimeParam(RunTimeParam&& from) noexcept
    : RunTimeParam() {
    *this = ::std::move(from);
  }

  inline RunTimeParam& operator=(RunTimeParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunTimeParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunTimeParam* internal_default_instance() {
    return reinterpret_cast<const RunTimeParam*>(
               &_RunTimeParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(RunTimeParam* other);
  friend void swap(RunTimeParam& a, RunTimeParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunTimeParam* New() const PROTOBUF_FINAL { return New(NULL); }

  RunTimeParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RunTimeParam& from);
  void MergeFrom(const RunTimeParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RunTimeParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 threadnum = 1;
  void clear_threadnum();
  static const int kThreadnumFieldNumber = 1;
  ::google::protobuf::int32 threadnum() const;
  void set_threadnum(::google::protobuf::int32 value);

  // int32 freamwidth = 2;
  void clear_freamwidth();
  static const int kFreamwidthFieldNumber = 2;
  ::google::protobuf::int32 freamwidth() const;
  void set_freamwidth(::google::protobuf::int32 value);

  // int32 freamheight = 3;
  void clear_freamheight();
  static const int kFreamheightFieldNumber = 3;
  ::google::protobuf::int32 freamheight() const;
  void set_freamheight(::google::protobuf::int32 value);

  // int32 dowmsample = 4;
  void clear_dowmsample();
  static const int kDowmsampleFieldNumber = 4;
  ::google::protobuf::int32 dowmsample() const;
  void set_dowmsample(::google::protobuf::int32 value);

  // int32 splitsizex = 5;
  void clear_splitsizex();
  static const int kSplitsizexFieldNumber = 5;
  ::google::protobuf::int32 splitsizex() const;
  void set_splitsizex(::google::protobuf::int32 value);

  // int32 splitsizey = 6;
  void clear_splitsizey();
  static const int kSplitsizeyFieldNumber = 6;
  ::google::protobuf::int32 splitsizey() const;
  void set_splitsizey(::google::protobuf::int32 value);

  // bool isgpu = 7;
  void clear_isgpu();
  static const int kIsgpuFieldNumber = 7;
  bool isgpu() const;
  void set_isgpu(bool value);

  // @@protoc_insertion_point(class_scope:Parameters.RunTimeParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 threadnum_;
  ::google::protobuf::int32 freamwidth_;
  ::google::protobuf::int32 freamheight_;
  ::google::protobuf::int32 dowmsample_;
  ::google::protobuf::int32 splitsizex_;
  ::google::protobuf::int32 splitsizey_;
  bool isgpu_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsRunTimeParamImpl();
};
// -------------------------------------------------------------------

class SystemRectifyParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Parameters.SystemRectifyParam) */ {
 public:
  SystemRectifyParam();
  virtual ~SystemRectifyParam();

  SystemRectifyParam(const SystemRectifyParam& from);

  inline SystemRectifyParam& operator=(const SystemRectifyParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemRectifyParam(SystemRectifyParam&& from) noexcept
    : SystemRectifyParam() {
    *this = ::std::move(from);
  }

  inline SystemRectifyParam& operator=(SystemRectifyParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemRectifyParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemRectifyParam* internal_default_instance() {
    return reinterpret_cast<const SystemRectifyParam*>(
               &_SystemRectifyParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SystemRectifyParam* other);
  friend void swap(SystemRectifyParam& a, SystemRectifyParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemRectifyParam* New() const PROTOBUF_FINAL { return New(NULL); }

  SystemRectifyParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SystemRectifyParam& from);
  void MergeFrom(const SystemRectifyParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SystemRectifyParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rectifyparamfilepath = 4;
  void clear_rectifyparamfilepath();
  static const int kRectifyparamfilepathFieldNumber = 4;
  const ::std::string& rectifyparamfilepath() const;
  void set_rectifyparamfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_rectifyparamfilepath(::std::string&& value);
  #endif
  void set_rectifyparamfilepath(const char* value);
  void set_rectifyparamfilepath(const char* value, size_t size);
  ::std::string* mutable_rectifyparamfilepath();
  ::std::string* release_rectifyparamfilepath();
  void set_allocated_rectifyparamfilepath(::std::string* rectifyparamfilepath);

  // float xphysicresolution = 1;
  void clear_xphysicresolution();
  static const int kXphysicresolutionFieldNumber = 1;
  float xphysicresolution() const;
  void set_xphysicresolution(float value);

  // float lengthPerFream = 2;
  void clear_lengthperfream();
  static const int kLengthPerFreamFieldNumber = 2;
  float lengthperfream() const;
  void set_lengthperfream(float value);

  // float yphysicresolution = 3;
  void clear_yphysicresolution();
  static const int kYphysicresolutionFieldNumber = 3;
  float yphysicresolution() const;
  void set_yphysicresolution(float value);

  // int32 offsetY = 5;
  void clear_offsety();
  static const int kOffsetYFieldNumber = 5;
  ::google::protobuf::int32 offsety() const;
  void set_offsety(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Parameters.SystemRectifyParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rectifyparamfilepath_;
  float xphysicresolution_;
  float lengthperfream_;
  float yphysicresolution_;
  ::google::protobuf::int32 offsety_;
  mutable int _cached_size_;
  friend struct ::protobuf_proto_2fcheckparam_2eproto::TableStruct;
  friend void ::protobuf_proto_2fcheckparam_2eproto::InitDefaultsSystemRectifyParamImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GaussianParam

// int32 sizex = 1;
inline void GaussianParam::clear_sizex() {
  sizex_ = 0;
}
inline ::google::protobuf::int32 GaussianParam::sizex() const {
  // @@protoc_insertion_point(field_get:Parameters.GaussianParam.sizex)
  return sizex_;
}
inline void GaussianParam::set_sizex(::google::protobuf::int32 value) {
  
  sizex_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GaussianParam.sizex)
}

// int32 sizey = 2;
inline void GaussianParam::clear_sizey() {
  sizey_ = 0;
}
inline ::google::protobuf::int32 GaussianParam::sizey() const {
  // @@protoc_insertion_point(field_get:Parameters.GaussianParam.sizey)
  return sizey_;
}
inline void GaussianParam::set_sizey(::google::protobuf::int32 value) {
  
  sizey_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GaussianParam.sizey)
}

// float sigma = 3;
inline void GaussianParam::clear_sigma() {
  sigma_ = 0;
}
inline float GaussianParam::sigma() const {
  // @@protoc_insertion_point(field_get:Parameters.GaussianParam.sigma)
  return sigma_;
}
inline void GaussianParam::set_sigma(float value) {
  
  sigma_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GaussianParam.sigma)
}

// string KernelName = 4;
inline void GaussianParam::clear_kernelname() {
  kernelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GaussianParam::kernelname() const {
  // @@protoc_insertion_point(field_get:Parameters.GaussianParam.KernelName)
  return kernelname_.GetNoArena();
}
inline void GaussianParam::set_kernelname(const ::std::string& value) {
  
  kernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.GaussianParam.KernelName)
}
#if LANG_CXX11
inline void GaussianParam::set_kernelname(::std::string&& value) {
  
  kernelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.GaussianParam.KernelName)
}
#endif
inline void GaussianParam::set_kernelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.GaussianParam.KernelName)
}
inline void GaussianParam::set_kernelname(const char* value, size_t size) {
  
  kernelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.GaussianParam.KernelName)
}
inline ::std::string* GaussianParam::mutable_kernelname() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.GaussianParam.KernelName)
  return kernelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GaussianParam::release_kernelname() {
  // @@protoc_insertion_point(field_release:Parameters.GaussianParam.KernelName)
  
  return kernelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GaussianParam::set_allocated_kernelname(::std::string* kernelname) {
  if (kernelname != NULL) {
    
  } else {
    
  }
  kernelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kernelname);
  // @@protoc_insertion_point(field_set_allocated:Parameters.GaussianParam.KernelName)
}

// -------------------------------------------------------------------

// DOGparam

// .Parameters.GaussianParam refKernel = 2;
inline bool DOGparam::has_refkernel() const {
  return this != internal_default_instance() && refkernel_ != NULL;
}
inline void DOGparam::clear_refkernel() {
  if (GetArenaNoVirtual() == NULL && refkernel_ != NULL) {
    delete refkernel_;
  }
  refkernel_ = NULL;
}
inline const ::Parameters::GaussianParam& DOGparam::refkernel() const {
  const ::Parameters::GaussianParam* p = refkernel_;
  // @@protoc_insertion_point(field_get:Parameters.DOGparam.refKernel)
  return p != NULL ? *p : *reinterpret_cast<const ::Parameters::GaussianParam*>(
      &::Parameters::_GaussianParam_default_instance_);
}
inline ::Parameters::GaussianParam* DOGparam::release_refkernel() {
  // @@protoc_insertion_point(field_release:Parameters.DOGparam.refKernel)
  
  ::Parameters::GaussianParam* temp = refkernel_;
  refkernel_ = NULL;
  return temp;
}
inline ::Parameters::GaussianParam* DOGparam::mutable_refkernel() {
  
  if (refkernel_ == NULL) {
    refkernel_ = new ::Parameters::GaussianParam;
  }
  // @@protoc_insertion_point(field_mutable:Parameters.DOGparam.refKernel)
  return refkernel_;
}
inline void DOGparam::set_allocated_refkernel(::Parameters::GaussianParam* refkernel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete refkernel_;
  }
  if (refkernel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      refkernel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, refkernel, submessage_arena);
    }
    
  } else {
    
  }
  refkernel_ = refkernel;
  // @@protoc_insertion_point(field_set_allocated:Parameters.DOGparam.refKernel)
}

// int32 thresholddark = 3;
inline void DOGparam::clear_thresholddark() {
  thresholddark_ = 0;
}
inline ::google::protobuf::int32 DOGparam::thresholddark() const {
  // @@protoc_insertion_point(field_get:Parameters.DOGparam.thresholddark)
  return thresholddark_;
}
inline void DOGparam::set_thresholddark(::google::protobuf::int32 value) {
  
  thresholddark_ = value;
  // @@protoc_insertion_point(field_set:Parameters.DOGparam.thresholddark)
}

// int32 thresholdlight = 4;
inline void DOGparam::clear_thresholdlight() {
  thresholdlight_ = 0;
}
inline ::google::protobuf::int32 DOGparam::thresholdlight() const {
  // @@protoc_insertion_point(field_get:Parameters.DOGparam.thresholdlight)
  return thresholdlight_;
}
inline void DOGparam::set_thresholdlight(::google::protobuf::int32 value) {
  
  thresholdlight_ = value;
  // @@protoc_insertion_point(field_set:Parameters.DOGparam.thresholdlight)
}

// -------------------------------------------------------------------

// MAXMINparm

// int32 threshigh = 1;
inline void MAXMINparm::clear_threshigh() {
  threshigh_ = 0;
}
inline ::google::protobuf::int32 MAXMINparm::threshigh() const {
  // @@protoc_insertion_point(field_get:Parameters.MAXMINparm.threshigh)
  return threshigh_;
}
inline void MAXMINparm::set_threshigh(::google::protobuf::int32 value) {
  
  threshigh_ = value;
  // @@protoc_insertion_point(field_set:Parameters.MAXMINparm.threshigh)
}

// int32 threshlow = 2;
inline void MAXMINparm::clear_threshlow() {
  threshlow_ = 0;
}
inline ::google::protobuf::int32 MAXMINparm::threshlow() const {
  // @@protoc_insertion_point(field_get:Parameters.MAXMINparm.threshlow)
  return threshlow_;
}
inline void MAXMINparm::set_threshlow(::google::protobuf::int32 value) {
  
  threshlow_ = value;
  // @@protoc_insertion_point(field_set:Parameters.MAXMINparm.threshlow)
}

// -------------------------------------------------------------------

// EXPVARparam

// float sigmatime = 1;
inline void EXPVARparam::clear_sigmatime() {
  sigmatime_ = 0;
}
inline float EXPVARparam::sigmatime() const {
  // @@protoc_insertion_point(field_get:Parameters.EXPVARparam.sigmatime)
  return sigmatime_;
}
inline void EXPVARparam::set_sigmatime(float value) {
  
  sigmatime_ = value;
  // @@protoc_insertion_point(field_set:Parameters.EXPVARparam.sigmatime)
}

// -------------------------------------------------------------------

// GeoClassifiyParam

// float minheight = 1;
inline void GeoClassifiyParam::clear_minheight() {
  minheight_ = 0;
}
inline float GeoClassifiyParam::minheight() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.minheight)
  return minheight_;
}
inline void GeoClassifiyParam::set_minheight(float value) {
  
  minheight_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.minheight)
}

// float maxheight = 2;
inline void GeoClassifiyParam::clear_maxheight() {
  maxheight_ = 0;
}
inline float GeoClassifiyParam::maxheight() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.maxheight)
  return maxheight_;
}
inline void GeoClassifiyParam::set_maxheight(float value) {
  
  maxheight_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.maxheight)
}

// float minwidth = 3;
inline void GeoClassifiyParam::clear_minwidth() {
  minwidth_ = 0;
}
inline float GeoClassifiyParam::minwidth() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.minwidth)
  return minwidth_;
}
inline void GeoClassifiyParam::set_minwidth(float value) {
  
  minwidth_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.minwidth)
}

// float maxwidth = 4;
inline void GeoClassifiyParam::clear_maxwidth() {
  maxwidth_ = 0;
}
inline float GeoClassifiyParam::maxwidth() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.maxwidth)
  return maxwidth_;
}
inline void GeoClassifiyParam::set_maxwidth(float value) {
  
  maxwidth_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.maxwidth)
}

// sint32 mindiff = 5;
inline void GeoClassifiyParam::clear_mindiff() {
  mindiff_ = 0;
}
inline ::google::protobuf::int32 GeoClassifiyParam::mindiff() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.mindiff)
  return mindiff_;
}
inline void GeoClassifiyParam::set_mindiff(::google::protobuf::int32 value) {
  
  mindiff_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.mindiff)
}

// sint32 maxdiff = 6;
inline void GeoClassifiyParam::clear_maxdiff() {
  maxdiff_ = 0;
}
inline ::google::protobuf::int32 GeoClassifiyParam::maxdiff() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.maxdiff)
  return maxdiff_;
}
inline void GeoClassifiyParam::set_maxdiff(::google::protobuf::int32 value) {
  
  maxdiff_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.maxdiff)
}

// float minarea = 7;
inline void GeoClassifiyParam::clear_minarea() {
  minarea_ = 0;
}
inline float GeoClassifiyParam::minarea() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.minarea)
  return minarea_;
}
inline void GeoClassifiyParam::set_minarea(float value) {
  
  minarea_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.minarea)
}

// float maxarea = 8;
inline void GeoClassifiyParam::clear_maxarea() {
  maxarea_ = 0;
}
inline float GeoClassifiyParam::maxarea() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.maxarea)
  return maxarea_;
}
inline void GeoClassifiyParam::set_maxarea(float value) {
  
  maxarea_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.maxarea)
}

// string defectname = 9;
inline void GeoClassifiyParam::clear_defectname() {
  defectname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GeoClassifiyParam::defectname() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.defectname)
  return defectname_.GetNoArena();
}
inline void GeoClassifiyParam::set_defectname(const ::std::string& value) {
  
  defectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.defectname)
}
#if LANG_CXX11
inline void GeoClassifiyParam::set_defectname(::std::string&& value) {
  
  defectname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.GeoClassifiyParam.defectname)
}
#endif
inline void GeoClassifiyParam::set_defectname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  defectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.GeoClassifiyParam.defectname)
}
inline void GeoClassifiyParam::set_defectname(const char* value, size_t size) {
  
  defectname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.GeoClassifiyParam.defectname)
}
inline ::std::string* GeoClassifiyParam::mutable_defectname() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.GeoClassifiyParam.defectname)
  return defectname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoClassifiyParam::release_defectname() {
  // @@protoc_insertion_point(field_release:Parameters.GeoClassifiyParam.defectname)
  
  return defectname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoClassifiyParam::set_allocated_defectname(::std::string* defectname) {
  if (defectname != NULL) {
    
  } else {
    
  }
  defectname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), defectname);
  // @@protoc_insertion_point(field_set_allocated:Parameters.GeoClassifiyParam.defectname)
}

// int32 iconid = 10;
inline void GeoClassifiyParam::clear_iconid() {
  iconid_ = 0;
}
inline ::google::protobuf::int32 GeoClassifiyParam::iconid() const {
  // @@protoc_insertion_point(field_get:Parameters.GeoClassifiyParam.iconid)
  return iconid_;
}
inline void GeoClassifiyParam::set_iconid(::google::protobuf::int32 value) {
  
  iconid_ = value;
  // @@protoc_insertion_point(field_set:Parameters.GeoClassifiyParam.iconid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SVMClassifyParam

// string modelPath = 1;
inline void SVMClassifyParam::clear_modelpath() {
  modelpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVMClassifyParam::modelpath() const {
  // @@protoc_insertion_point(field_get:Parameters.SVMClassifyParam.modelPath)
  return modelpath_.GetNoArena();
}
inline void SVMClassifyParam::set_modelpath(const ::std::string& value) {
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SVMClassifyParam.modelPath)
}
#if LANG_CXX11
inline void SVMClassifyParam::set_modelpath(::std::string&& value) {
  
  modelpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SVMClassifyParam.modelPath)
}
#endif
inline void SVMClassifyParam::set_modelpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SVMClassifyParam.modelPath)
}
inline void SVMClassifyParam::set_modelpath(const char* value, size_t size) {
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SVMClassifyParam.modelPath)
}
inline ::std::string* SVMClassifyParam::mutable_modelpath() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SVMClassifyParam.modelPath)
  return modelpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVMClassifyParam::release_modelpath() {
  // @@protoc_insertion_point(field_release:Parameters.SVMClassifyParam.modelPath)
  
  return modelpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVMClassifyParam::set_allocated_modelpath(::std::string* modelpath) {
  if (modelpath != NULL) {
    
  } else {
    
  }
  modelpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelpath);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SVMClassifyParam.modelPath)
}

// map<int32, string> defectlabelname = 2;
inline int SVMClassifyParam::defectlabelname_size() const {
  return defectlabelname_.size();
}
inline void SVMClassifyParam::clear_defectlabelname() {
  defectlabelname_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
SVMClassifyParam::defectlabelname() const {
  // @@protoc_insertion_point(field_map:Parameters.SVMClassifyParam.defectlabelname)
  return defectlabelname_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
SVMClassifyParam::mutable_defectlabelname() {
  // @@protoc_insertion_point(field_mutable_map:Parameters.SVMClassifyParam.defectlabelname)
  return defectlabelname_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DTreeClassifyParam

// string modelPath = 1;
inline void DTreeClassifyParam::clear_modelpath() {
  modelpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DTreeClassifyParam::modelpath() const {
  // @@protoc_insertion_point(field_get:Parameters.DTreeClassifyParam.modelPath)
  return modelpath_.GetNoArena();
}
inline void DTreeClassifyParam::set_modelpath(const ::std::string& value) {
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.DTreeClassifyParam.modelPath)
}
#if LANG_CXX11
inline void DTreeClassifyParam::set_modelpath(::std::string&& value) {
  
  modelpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.DTreeClassifyParam.modelPath)
}
#endif
inline void DTreeClassifyParam::set_modelpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.DTreeClassifyParam.modelPath)
}
inline void DTreeClassifyParam::set_modelpath(const char* value, size_t size) {
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.DTreeClassifyParam.modelPath)
}
inline ::std::string* DTreeClassifyParam::mutable_modelpath() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.DTreeClassifyParam.modelPath)
  return modelpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DTreeClassifyParam::release_modelpath() {
  // @@protoc_insertion_point(field_release:Parameters.DTreeClassifyParam.modelPath)
  
  return modelpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DTreeClassifyParam::set_allocated_modelpath(::std::string* modelpath) {
  if (modelpath != NULL) {
    
  } else {
    
  }
  modelpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelpath);
  // @@protoc_insertion_point(field_set_allocated:Parameters.DTreeClassifyParam.modelPath)
}

// map<int32, string> defectlabelname = 2;
inline int DTreeClassifyParam::defectlabelname_size() const {
  return defectlabelname_.size();
}
inline void DTreeClassifyParam::clear_defectlabelname() {
  defectlabelname_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
DTreeClassifyParam::defectlabelname() const {
  // @@protoc_insertion_point(field_map:Parameters.DTreeClassifyParam.defectlabelname)
  return defectlabelname_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
DTreeClassifyParam::mutable_defectlabelname() {
  // @@protoc_insertion_point(field_mutable_map:Parameters.DTreeClassifyParam.defectlabelname)
  return defectlabelname_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CaffeClassifyParam

// string modelPath = 1;
inline void CaffeClassifyParam::clear_modelpath() {
  modelpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CaffeClassifyParam::modelpath() const {
  // @@protoc_insertion_point(field_get:Parameters.CaffeClassifyParam.modelPath)
  return modelpath_.GetNoArena();
}
inline void CaffeClassifyParam::set_modelpath(const ::std::string& value) {
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.CaffeClassifyParam.modelPath)
}
#if LANG_CXX11
inline void CaffeClassifyParam::set_modelpath(::std::string&& value) {
  
  modelpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.CaffeClassifyParam.modelPath)
}
#endif
inline void CaffeClassifyParam::set_modelpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.CaffeClassifyParam.modelPath)
}
inline void CaffeClassifyParam::set_modelpath(const char* value, size_t size) {
  
  modelpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.CaffeClassifyParam.modelPath)
}
inline ::std::string* CaffeClassifyParam::mutable_modelpath() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.CaffeClassifyParam.modelPath)
  return modelpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CaffeClassifyParam::release_modelpath() {
  // @@protoc_insertion_point(field_release:Parameters.CaffeClassifyParam.modelPath)
  
  return modelpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CaffeClassifyParam::set_allocated_modelpath(::std::string* modelpath) {
  if (modelpath != NULL) {
    
  } else {
    
  }
  modelpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelpath);
  // @@protoc_insertion_point(field_set_allocated:Parameters.CaffeClassifyParam.modelPath)
}

// map<int32, string> defectlabelname = 2;
inline int CaffeClassifyParam::defectlabelname_size() const {
  return defectlabelname_.size();
}
inline void CaffeClassifyParam::clear_defectlabelname() {
  defectlabelname_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
CaffeClassifyParam::defectlabelname() const {
  // @@protoc_insertion_point(field_map:Parameters.CaffeClassifyParam.defectlabelname)
  return defectlabelname_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
CaffeClassifyParam::mutable_defectlabelname() {
  // @@protoc_insertion_point(field_mutable_map:Parameters.CaffeClassifyParam.defectlabelname)
  return defectlabelname_.MutableMap();
}

// -------------------------------------------------------------------

// BoundSearchParam

// float leftRange1 = 1;
inline void BoundSearchParam::clear_leftrange1() {
  leftrange1_ = 0;
}
inline float BoundSearchParam::leftrange1() const {
  // @@protoc_insertion_point(field_get:Parameters.BoundSearchParam.leftRange1)
  return leftrange1_;
}
inline void BoundSearchParam::set_leftrange1(float value) {
  
  leftrange1_ = value;
  // @@protoc_insertion_point(field_set:Parameters.BoundSearchParam.leftRange1)
}

// float leftRange2 = 2;
inline void BoundSearchParam::clear_leftrange2() {
  leftrange2_ = 0;
}
inline float BoundSearchParam::leftrange2() const {
  // @@protoc_insertion_point(field_get:Parameters.BoundSearchParam.leftRange2)
  return leftrange2_;
}
inline void BoundSearchParam::set_leftrange2(float value) {
  
  leftrange2_ = value;
  // @@protoc_insertion_point(field_set:Parameters.BoundSearchParam.leftRange2)
}

// float rightRange1 = 3;
inline void BoundSearchParam::clear_rightrange1() {
  rightrange1_ = 0;
}
inline float BoundSearchParam::rightrange1() const {
  // @@protoc_insertion_point(field_get:Parameters.BoundSearchParam.rightRange1)
  return rightrange1_;
}
inline void BoundSearchParam::set_rightrange1(float value) {
  
  rightrange1_ = value;
  // @@protoc_insertion_point(field_set:Parameters.BoundSearchParam.rightRange1)
}

// float rightRange2 = 4;
inline void BoundSearchParam::clear_rightrange2() {
  rightrange2_ = 0;
}
inline float BoundSearchParam::rightrange2() const {
  // @@protoc_insertion_point(field_get:Parameters.BoundSearchParam.rightRange2)
  return rightrange2_;
}
inline void BoundSearchParam::set_rightrange2(float value) {
  
  rightrange2_ = value;
  // @@protoc_insertion_point(field_set:Parameters.BoundSearchParam.rightRange2)
}

// -------------------------------------------------------------------

// InspectParam

// int32 dstvaluefrd = 1;
inline void InspectParam::clear_dstvaluefrd() {
  dstvaluefrd_ = 0;
}
inline ::google::protobuf::int32 InspectParam::dstvaluefrd() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.dstvaluefrd)
  return dstvaluefrd_;
}
inline void InspectParam::set_dstvaluefrd(::google::protobuf::int32 value) {
  
  dstvaluefrd_ = value;
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.dstvaluefrd)
}

// int32 dstvaluebgd = 2;
inline void InspectParam::clear_dstvaluebgd() {
  dstvaluebgd_ = 0;
}
inline ::google::protobuf::int32 InspectParam::dstvaluebgd() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.dstvaluebgd)
  return dstvaluebgd_;
}
inline void InspectParam::set_dstvaluebgd(::google::protobuf::int32 value) {
  
  dstvaluebgd_ = value;
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.dstvaluebgd)
}

// repeated .Parameters.BoundSearchParam boundsearchlist = 3;
inline int InspectParam::boundsearchlist_size() const {
  return boundsearchlist_.size();
}
inline void InspectParam::clear_boundsearchlist() {
  boundsearchlist_.Clear();
}
inline const ::Parameters::BoundSearchParam& InspectParam::boundsearchlist(int index) const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.boundsearchlist)
  return boundsearchlist_.Get(index);
}
inline ::Parameters::BoundSearchParam* InspectParam::mutable_boundsearchlist(int index) {
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.boundsearchlist)
  return boundsearchlist_.Mutable(index);
}
inline ::Parameters::BoundSearchParam* InspectParam::add_boundsearchlist() {
  // @@protoc_insertion_point(field_add:Parameters.InspectParam.boundsearchlist)
  return boundsearchlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Parameters::BoundSearchParam >*
InspectParam::mutable_boundsearchlist() {
  // @@protoc_insertion_point(field_mutable_list:Parameters.InspectParam.boundsearchlist)
  return &boundsearchlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Parameters::BoundSearchParam >&
InspectParam::boundsearchlist() const {
  // @@protoc_insertion_point(field_list:Parameters.InspectParam.boundsearchlist)
  return boundsearchlist_;
}

// .Parameters.InspectParam.CheckType checktype = 4;
inline void InspectParam::clear_checktype() {
  checktype_ = 0;
}
inline ::Parameters::InspectParam_CheckType InspectParam::checktype() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.checktype)
  return static_cast< ::Parameters::InspectParam_CheckType >(checktype_);
}
inline void InspectParam::set_checktype(::Parameters::InspectParam_CheckType value) {
  
  checktype_ = value;
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.checktype)
}

// .Parameters.DOGparam dogParam = 5;
inline bool InspectParam::has_dogparam() const {
  return this != internal_default_instance() && dogparam_ != NULL;
}
inline void InspectParam::clear_dogparam() {
  if (GetArenaNoVirtual() == NULL && dogparam_ != NULL) {
    delete dogparam_;
  }
  dogparam_ = NULL;
}
inline const ::Parameters::DOGparam& InspectParam::dogparam() const {
  const ::Parameters::DOGparam* p = dogparam_;
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.dogParam)
  return p != NULL ? *p : *reinterpret_cast<const ::Parameters::DOGparam*>(
      &::Parameters::_DOGparam_default_instance_);
}
inline ::Parameters::DOGparam* InspectParam::release_dogparam() {
  // @@protoc_insertion_point(field_release:Parameters.InspectParam.dogParam)
  
  ::Parameters::DOGparam* temp = dogparam_;
  dogparam_ = NULL;
  return temp;
}
inline ::Parameters::DOGparam* InspectParam::mutable_dogparam() {
  
  if (dogparam_ == NULL) {
    dogparam_ = new ::Parameters::DOGparam;
  }
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.dogParam)
  return dogparam_;
}
inline void InspectParam::set_allocated_dogparam(::Parameters::DOGparam* dogparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dogparam_;
  }
  if (dogparam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dogparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dogparam, submessage_arena);
    }
    
  } else {
    
  }
  dogparam_ = dogparam;
  // @@protoc_insertion_point(field_set_allocated:Parameters.InspectParam.dogParam)
}

// .Parameters.EXPVARparam expvarParam = 6;
inline bool InspectParam::has_expvarparam() const {
  return this != internal_default_instance() && expvarparam_ != NULL;
}
inline void InspectParam::clear_expvarparam() {
  if (GetArenaNoVirtual() == NULL && expvarparam_ != NULL) {
    delete expvarparam_;
  }
  expvarparam_ = NULL;
}
inline const ::Parameters::EXPVARparam& InspectParam::expvarparam() const {
  const ::Parameters::EXPVARparam* p = expvarparam_;
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.expvarParam)
  return p != NULL ? *p : *reinterpret_cast<const ::Parameters::EXPVARparam*>(
      &::Parameters::_EXPVARparam_default_instance_);
}
inline ::Parameters::EXPVARparam* InspectParam::release_expvarparam() {
  // @@protoc_insertion_point(field_release:Parameters.InspectParam.expvarParam)
  
  ::Parameters::EXPVARparam* temp = expvarparam_;
  expvarparam_ = NULL;
  return temp;
}
inline ::Parameters::EXPVARparam* InspectParam::mutable_expvarparam() {
  
  if (expvarparam_ == NULL) {
    expvarparam_ = new ::Parameters::EXPVARparam;
  }
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.expvarParam)
  return expvarparam_;
}
inline void InspectParam::set_allocated_expvarparam(::Parameters::EXPVARparam* expvarparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete expvarparam_;
  }
  if (expvarparam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expvarparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expvarparam, submessage_arena);
    }
    
  } else {
    
  }
  expvarparam_ = expvarparam;
  // @@protoc_insertion_point(field_set_allocated:Parameters.InspectParam.expvarParam)
}

// .Parameters.MAXMINparm maxminParam = 7;
inline bool InspectParam::has_maxminparam() const {
  return this != internal_default_instance() && maxminparam_ != NULL;
}
inline void InspectParam::clear_maxminparam() {
  if (GetArenaNoVirtual() == NULL && maxminparam_ != NULL) {
    delete maxminparam_;
  }
  maxminparam_ = NULL;
}
inline const ::Parameters::MAXMINparm& InspectParam::maxminparam() const {
  const ::Parameters::MAXMINparm* p = maxminparam_;
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.maxminParam)
  return p != NULL ? *p : *reinterpret_cast<const ::Parameters::MAXMINparm*>(
      &::Parameters::_MAXMINparm_default_instance_);
}
inline ::Parameters::MAXMINparm* InspectParam::release_maxminparam() {
  // @@protoc_insertion_point(field_release:Parameters.InspectParam.maxminParam)
  
  ::Parameters::MAXMINparm* temp = maxminparam_;
  maxminparam_ = NULL;
  return temp;
}
inline ::Parameters::MAXMINparm* InspectParam::mutable_maxminparam() {
  
  if (maxminparam_ == NULL) {
    maxminparam_ = new ::Parameters::MAXMINparm;
  }
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.maxminParam)
  return maxminparam_;
}
inline void InspectParam::set_allocated_maxminparam(::Parameters::MAXMINparm* maxminparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete maxminparam_;
  }
  if (maxminparam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      maxminparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maxminparam, submessage_arena);
    }
    
  } else {
    
  }
  maxminparam_ = maxminparam;
  // @@protoc_insertion_point(field_set_allocated:Parameters.InspectParam.maxminParam)
}

// float blobThr = 8;
inline void InspectParam::clear_blobthr() {
  blobthr_ = 0;
}
inline float InspectParam::blobthr() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.blobThr)
  return blobthr_;
}
inline void InspectParam::set_blobthr(float value) {
  
  blobthr_ = value;
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.blobThr)
}

// .Parameters.InspectParam.ClassifictionType classificcationtype = 9;
inline void InspectParam::clear_classificcationtype() {
  classificcationtype_ = 0;
}
inline ::Parameters::InspectParam_ClassifictionType InspectParam::classificcationtype() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.classificcationtype)
  return static_cast< ::Parameters::InspectParam_ClassifictionType >(classificcationtype_);
}
inline void InspectParam::set_classificcationtype(::Parameters::InspectParam_ClassifictionType value) {
  
  classificcationtype_ = value;
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.classificcationtype)
}

// repeated .Parameters.GeoClassifiyParam geoParamlist = 10;
inline int InspectParam::geoparamlist_size() const {
  return geoparamlist_.size();
}
inline void InspectParam::clear_geoparamlist() {
  geoparamlist_.Clear();
}
inline const ::Parameters::GeoClassifiyParam& InspectParam::geoparamlist(int index) const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.geoParamlist)
  return geoparamlist_.Get(index);
}
inline ::Parameters::GeoClassifiyParam* InspectParam::mutable_geoparamlist(int index) {
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.geoParamlist)
  return geoparamlist_.Mutable(index);
}
inline ::Parameters::GeoClassifiyParam* InspectParam::add_geoparamlist() {
  // @@protoc_insertion_point(field_add:Parameters.InspectParam.geoParamlist)
  return geoparamlist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Parameters::GeoClassifiyParam >*
InspectParam::mutable_geoparamlist() {
  // @@protoc_insertion_point(field_mutable_list:Parameters.InspectParam.geoParamlist)
  return &geoparamlist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Parameters::GeoClassifiyParam >&
InspectParam::geoparamlist() const {
  // @@protoc_insertion_point(field_list:Parameters.InspectParam.geoParamlist)
  return geoparamlist_;
}

// .Parameters.SVMClassifyParam svmParam = 11;
inline bool InspectParam::has_svmparam() const {
  return this != internal_default_instance() && svmparam_ != NULL;
}
inline void InspectParam::clear_svmparam() {
  if (GetArenaNoVirtual() == NULL && svmparam_ != NULL) {
    delete svmparam_;
  }
  svmparam_ = NULL;
}
inline const ::Parameters::SVMClassifyParam& InspectParam::svmparam() const {
  const ::Parameters::SVMClassifyParam* p = svmparam_;
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.svmParam)
  return p != NULL ? *p : *reinterpret_cast<const ::Parameters::SVMClassifyParam*>(
      &::Parameters::_SVMClassifyParam_default_instance_);
}
inline ::Parameters::SVMClassifyParam* InspectParam::release_svmparam() {
  // @@protoc_insertion_point(field_release:Parameters.InspectParam.svmParam)
  
  ::Parameters::SVMClassifyParam* temp = svmparam_;
  svmparam_ = NULL;
  return temp;
}
inline ::Parameters::SVMClassifyParam* InspectParam::mutable_svmparam() {
  
  if (svmparam_ == NULL) {
    svmparam_ = new ::Parameters::SVMClassifyParam;
  }
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.svmParam)
  return svmparam_;
}
inline void InspectParam::set_allocated_svmparam(::Parameters::SVMClassifyParam* svmparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete svmparam_;
  }
  if (svmparam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      svmparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, svmparam, submessage_arena);
    }
    
  } else {
    
  }
  svmparam_ = svmparam;
  // @@protoc_insertion_point(field_set_allocated:Parameters.InspectParam.svmParam)
}

// .Parameters.DTreeClassifyParam DTreeParam = 12;
inline bool InspectParam::has_dtreeparam() const {
  return this != internal_default_instance() && dtreeparam_ != NULL;
}
inline void InspectParam::clear_dtreeparam() {
  if (GetArenaNoVirtual() == NULL && dtreeparam_ != NULL) {
    delete dtreeparam_;
  }
  dtreeparam_ = NULL;
}
inline const ::Parameters::DTreeClassifyParam& InspectParam::dtreeparam() const {
  const ::Parameters::DTreeClassifyParam* p = dtreeparam_;
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.DTreeParam)
  return p != NULL ? *p : *reinterpret_cast<const ::Parameters::DTreeClassifyParam*>(
      &::Parameters::_DTreeClassifyParam_default_instance_);
}
inline ::Parameters::DTreeClassifyParam* InspectParam::release_dtreeparam() {
  // @@protoc_insertion_point(field_release:Parameters.InspectParam.DTreeParam)
  
  ::Parameters::DTreeClassifyParam* temp = dtreeparam_;
  dtreeparam_ = NULL;
  return temp;
}
inline ::Parameters::DTreeClassifyParam* InspectParam::mutable_dtreeparam() {
  
  if (dtreeparam_ == NULL) {
    dtreeparam_ = new ::Parameters::DTreeClassifyParam;
  }
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.DTreeParam)
  return dtreeparam_;
}
inline void InspectParam::set_allocated_dtreeparam(::Parameters::DTreeClassifyParam* dtreeparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dtreeparam_;
  }
  if (dtreeparam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dtreeparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dtreeparam, submessage_arena);
    }
    
  } else {
    
  }
  dtreeparam_ = dtreeparam;
  // @@protoc_insertion_point(field_set_allocated:Parameters.InspectParam.DTreeParam)
}

// .Parameters.CaffeClassifyParam CaffeParam = 13;
inline bool InspectParam::has_caffeparam() const {
  return this != internal_default_instance() && caffeparam_ != NULL;
}
inline void InspectParam::clear_caffeparam() {
  if (GetArenaNoVirtual() == NULL && caffeparam_ != NULL) {
    delete caffeparam_;
  }
  caffeparam_ = NULL;
}
inline const ::Parameters::CaffeClassifyParam& InspectParam::caffeparam() const {
  const ::Parameters::CaffeClassifyParam* p = caffeparam_;
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.CaffeParam)
  return p != NULL ? *p : *reinterpret_cast<const ::Parameters::CaffeClassifyParam*>(
      &::Parameters::_CaffeClassifyParam_default_instance_);
}
inline ::Parameters::CaffeClassifyParam* InspectParam::release_caffeparam() {
  // @@protoc_insertion_point(field_release:Parameters.InspectParam.CaffeParam)
  
  ::Parameters::CaffeClassifyParam* temp = caffeparam_;
  caffeparam_ = NULL;
  return temp;
}
inline ::Parameters::CaffeClassifyParam* InspectParam::mutable_caffeparam() {
  
  if (caffeparam_ == NULL) {
    caffeparam_ = new ::Parameters::CaffeClassifyParam;
  }
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.CaffeParam)
  return caffeparam_;
}
inline void InspectParam::set_allocated_caffeparam(::Parameters::CaffeClassifyParam* caffeparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete caffeparam_;
  }
  if (caffeparam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      caffeparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, caffeparam, submessage_arena);
    }
    
  } else {
    
  }
  caffeparam_ = caffeparam;
  // @@protoc_insertion_point(field_set_allocated:Parameters.InspectParam.CaffeParam)
}

// float exposureTime = 14;
inline void InspectParam::clear_exposuretime() {
  exposuretime_ = 0;
}
inline float InspectParam::exposuretime() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.exposureTime)
  return exposuretime_;
}
inline void InspectParam::set_exposuretime(float value) {
  
  exposuretime_ = value;
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.exposureTime)
}

// float gain = 15;
inline void InspectParam::clear_gain() {
  gain_ = 0;
}
inline float InspectParam::gain() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.gain)
  return gain_;
}
inline void InspectParam::set_gain(float value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.gain)
}

// string savepath = 16;
inline void InspectParam::clear_savepath() {
  savepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectParam::savepath() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.savepath)
  return savepath_.GetNoArena();
}
inline void InspectParam::set_savepath(const ::std::string& value) {
  
  savepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.savepath)
}
#if LANG_CXX11
inline void InspectParam::set_savepath(::std::string&& value) {
  
  savepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.InspectParam.savepath)
}
#endif
inline void InspectParam::set_savepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  savepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.InspectParam.savepath)
}
inline void InspectParam::set_savepath(const char* value, size_t size) {
  
  savepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.InspectParam.savepath)
}
inline ::std::string* InspectParam::mutable_savepath() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.savepath)
  return savepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectParam::release_savepath() {
  // @@protoc_insertion_point(field_release:Parameters.InspectParam.savepath)
  
  return savepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectParam::set_allocated_savepath(::std::string* savepath) {
  if (savepath != NULL) {
    
  } else {
    
  }
  savepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), savepath);
  // @@protoc_insertion_point(field_set_allocated:Parameters.InspectParam.savepath)
}

// string paramname = 17;
inline void InspectParam::clear_paramname() {
  paramname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectParam::paramname() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.paramname)
  return paramname_.GetNoArena();
}
inline void InspectParam::set_paramname(const ::std::string& value) {
  
  paramname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.paramname)
}
#if LANG_CXX11
inline void InspectParam::set_paramname(::std::string&& value) {
  
  paramname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.InspectParam.paramname)
}
#endif
inline void InspectParam::set_paramname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  paramname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.InspectParam.paramname)
}
inline void InspectParam::set_paramname(const char* value, size_t size) {
  
  paramname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.InspectParam.paramname)
}
inline ::std::string* InspectParam::mutable_paramname() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.InspectParam.paramname)
  return paramname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectParam::release_paramname() {
  // @@protoc_insertion_point(field_release:Parameters.InspectParam.paramname)
  
  return paramname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectParam::set_allocated_paramname(::std::string* paramname) {
  if (paramname != NULL) {
    
  } else {
    
  }
  paramname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paramname);
  // @@protoc_insertion_point(field_set_allocated:Parameters.InspectParam.paramname)
}

// int32 layerType = 18;
inline void InspectParam::clear_layertype() {
  layertype_ = 0;
}
inline ::google::protobuf::int32 InspectParam::layertype() const {
  // @@protoc_insertion_point(field_get:Parameters.InspectParam.layerType)
  return layertype_;
}
inline void InspectParam::set_layertype(::google::protobuf::int32 value) {
  
  layertype_ = value;
  // @@protoc_insertion_point(field_set:Parameters.InspectParam.layerType)
}

// -------------------------------------------------------------------

// StripParam

// float leftoffset = 1;
inline void StripParam::clear_leftoffset() {
  leftoffset_ = 0;
}
inline float StripParam::leftoffset() const {
  // @@protoc_insertion_point(field_get:Parameters.StripParam.leftoffset)
  return leftoffset_;
}
inline void StripParam::set_leftoffset(float value) {
  
  leftoffset_ = value;
  // @@protoc_insertion_point(field_set:Parameters.StripParam.leftoffset)
}

// repeated float stripwidth = 2;
inline int StripParam::stripwidth_size() const {
  return stripwidth_.size();
}
inline void StripParam::clear_stripwidth() {
  stripwidth_.Clear();
}
inline float StripParam::stripwidth(int index) const {
  // @@protoc_insertion_point(field_get:Parameters.StripParam.stripwidth)
  return stripwidth_.Get(index);
}
inline void StripParam::set_stripwidth(int index, float value) {
  stripwidth_.Set(index, value);
  // @@protoc_insertion_point(field_set:Parameters.StripParam.stripwidth)
}
inline void StripParam::add_stripwidth(float value) {
  stripwidth_.Add(value);
  // @@protoc_insertion_point(field_add:Parameters.StripParam.stripwidth)
}
inline const ::google::protobuf::RepeatedField< float >&
StripParam::stripwidth() const {
  // @@protoc_insertion_point(field_list:Parameters.StripParam.stripwidth)
  return stripwidth_;
}
inline ::google::protobuf::RepeatedField< float >*
StripParam::mutable_stripwidth() {
  // @@protoc_insertion_point(field_mutable_list:Parameters.StripParam.stripwidth)
  return &stripwidth_;
}

// float allwidth = 3;
inline void StripParam::clear_allwidth() {
  allwidth_ = 0;
}
inline float StripParam::allwidth() const {
  // @@protoc_insertion_point(field_get:Parameters.StripParam.allwidth)
  return allwidth_;
}
inline void StripParam::set_allwidth(float value) {
  
  allwidth_ = value;
  // @@protoc_insertion_point(field_set:Parameters.StripParam.allwidth)
}

// int32 stripcount = 4;
inline void StripParam::clear_stripcount() {
  stripcount_ = 0;
}
inline ::google::protobuf::int32 StripParam::stripcount() const {
  // @@protoc_insertion_point(field_get:Parameters.StripParam.stripcount)
  return stripcount_;
}
inline void StripParam::set_stripcount(::google::protobuf::int32 value) {
  
  stripcount_ = value;
  // @@protoc_insertion_point(field_set:Parameters.StripParam.stripcount)
}

// -------------------------------------------------------------------

// SheetInfo

// string username = 1;
inline void SheetInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SheetInfo::username() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.username)
  return username_.GetNoArena();
}
inline void SheetInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.username)
}
#if LANG_CXX11
inline void SheetInfo::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SheetInfo.username)
}
#endif
inline void SheetInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SheetInfo.username)
}
inline void SheetInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SheetInfo.username)
}
inline ::std::string* SheetInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SheetInfo::release_username() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SheetInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.username)
}

// string machinenumber = 2;
inline void SheetInfo::clear_machinenumber() {
  machinenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SheetInfo::machinenumber() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.machinenumber)
  return machinenumber_.GetNoArena();
}
inline void SheetInfo::set_machinenumber(const ::std::string& value) {
  
  machinenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.machinenumber)
}
#if LANG_CXX11
inline void SheetInfo::set_machinenumber(::std::string&& value) {
  
  machinenumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SheetInfo.machinenumber)
}
#endif
inline void SheetInfo::set_machinenumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machinenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SheetInfo.machinenumber)
}
inline void SheetInfo::set_machinenumber(const char* value, size_t size) {
  
  machinenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SheetInfo.machinenumber)
}
inline ::std::string* SheetInfo::mutable_machinenumber() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.machinenumber)
  return machinenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SheetInfo::release_machinenumber() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.machinenumber)
  
  return machinenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SheetInfo::set_allocated_machinenumber(::std::string* machinenumber) {
  if (machinenumber != NULL) {
    
  } else {
    
  }
  machinenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machinenumber);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.machinenumber)
}

// string imageModel = 3;
inline void SheetInfo::clear_imagemodel() {
  imagemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SheetInfo::imagemodel() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.imageModel)
  return imagemodel_.GetNoArena();
}
inline void SheetInfo::set_imagemodel(const ::std::string& value) {
  
  imagemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.imageModel)
}
#if LANG_CXX11
inline void SheetInfo::set_imagemodel(::std::string&& value) {
  
  imagemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SheetInfo.imageModel)
}
#endif
inline void SheetInfo::set_imagemodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SheetInfo.imageModel)
}
inline void SheetInfo::set_imagemodel(const char* value, size_t size) {
  
  imagemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SheetInfo.imageModel)
}
inline ::std::string* SheetInfo::mutable_imagemodel() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.imageModel)
  return imagemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SheetInfo::release_imagemodel() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.imageModel)
  
  return imagemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SheetInfo::set_allocated_imagemodel(::std::string* imagemodel) {
  if (imagemodel != NULL) {
    
  } else {
    
  }
  imagemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagemodel);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.imageModel)
}

// string prodctname = 4;
inline void SheetInfo::clear_prodctname() {
  prodctname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SheetInfo::prodctname() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.prodctname)
  return prodctname_.GetNoArena();
}
inline void SheetInfo::set_prodctname(const ::std::string& value) {
  
  prodctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.prodctname)
}
#if LANG_CXX11
inline void SheetInfo::set_prodctname(::std::string&& value) {
  
  prodctname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SheetInfo.prodctname)
}
#endif
inline void SheetInfo::set_prodctname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prodctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SheetInfo.prodctname)
}
inline void SheetInfo::set_prodctname(const char* value, size_t size) {
  
  prodctname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SheetInfo.prodctname)
}
inline ::std::string* SheetInfo::mutable_prodctname() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.prodctname)
  return prodctname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SheetInfo::release_prodctname() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.prodctname)
  
  return prodctname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SheetInfo::set_allocated_prodctname(::std::string* prodctname) {
  if (prodctname != NULL) {
    
  } else {
    
  }
  prodctname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prodctname);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.prodctname)
}

// string ordernumber = 5;
inline void SheetInfo::clear_ordernumber() {
  ordernumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SheetInfo::ordernumber() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.ordernumber)
  return ordernumber_.GetNoArena();
}
inline void SheetInfo::set_ordernumber(const ::std::string& value) {
  
  ordernumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.ordernumber)
}
#if LANG_CXX11
inline void SheetInfo::set_ordernumber(::std::string&& value) {
  
  ordernumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SheetInfo.ordernumber)
}
#endif
inline void SheetInfo::set_ordernumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ordernumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SheetInfo.ordernumber)
}
inline void SheetInfo::set_ordernumber(const char* value, size_t size) {
  
  ordernumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SheetInfo.ordernumber)
}
inline ::std::string* SheetInfo::mutable_ordernumber() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.ordernumber)
  return ordernumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SheetInfo::release_ordernumber() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.ordernumber)
  
  return ordernumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SheetInfo::set_allocated_ordernumber(::std::string* ordernumber) {
  if (ordernumber != NULL) {
    
  } else {
    
  }
  ordernumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordernumber);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.ordernumber)
}

// string batchnumber = 6;
inline void SheetInfo::clear_batchnumber() {
  batchnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SheetInfo::batchnumber() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.batchnumber)
  return batchnumber_.GetNoArena();
}
inline void SheetInfo::set_batchnumber(const ::std::string& value) {
  
  batchnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.batchnumber)
}
#if LANG_CXX11
inline void SheetInfo::set_batchnumber(::std::string&& value) {
  
  batchnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SheetInfo.batchnumber)
}
#endif
inline void SheetInfo::set_batchnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  batchnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SheetInfo.batchnumber)
}
inline void SheetInfo::set_batchnumber(const char* value, size_t size) {
  
  batchnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SheetInfo.batchnumber)
}
inline ::std::string* SheetInfo::mutable_batchnumber() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.batchnumber)
  return batchnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SheetInfo::release_batchnumber() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.batchnumber)
  
  return batchnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SheetInfo::set_allocated_batchnumber(::std::string* batchnumber) {
  if (batchnumber != NULL) {
    
  } else {
    
  }
  batchnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batchnumber);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.batchnumber)
}

// string inspectparamname = 7;
inline void SheetInfo::clear_inspectparamname() {
  inspectparamname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SheetInfo::inspectparamname() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.inspectparamname)
  return inspectparamname_.GetNoArena();
}
inline void SheetInfo::set_inspectparamname(const ::std::string& value) {
  
  inspectparamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.inspectparamname)
}
#if LANG_CXX11
inline void SheetInfo::set_inspectparamname(::std::string&& value) {
  
  inspectparamname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SheetInfo.inspectparamname)
}
#endif
inline void SheetInfo::set_inspectparamname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inspectparamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SheetInfo.inspectparamname)
}
inline void SheetInfo::set_inspectparamname(const char* value, size_t size) {
  
  inspectparamname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SheetInfo.inspectparamname)
}
inline ::std::string* SheetInfo::mutable_inspectparamname() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.inspectparamname)
  return inspectparamname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SheetInfo::release_inspectparamname() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.inspectparamname)
  
  return inspectparamname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SheetInfo::set_allocated_inspectparamname(::std::string* inspectparamname) {
  if (inspectparamname != NULL) {
    
  } else {
    
  }
  inspectparamname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inspectparamname);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.inspectparamname)
}

// string remark = 9;
inline void SheetInfo::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SheetInfo::remark() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.remark)
  return remark_.GetNoArena();
}
inline void SheetInfo::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.remark)
}
#if LANG_CXX11
inline void SheetInfo::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SheetInfo.remark)
}
#endif
inline void SheetInfo::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SheetInfo.remark)
}
inline void SheetInfo::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SheetInfo.remark)
}
inline ::std::string* SheetInfo::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SheetInfo::release_remark() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SheetInfo::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.remark)
}

// .Parameters.StripParam stripparam = 8;
inline bool SheetInfo::has_stripparam() const {
  return this != internal_default_instance() && stripparam_ != NULL;
}
inline void SheetInfo::clear_stripparam() {
  if (GetArenaNoVirtual() == NULL && stripparam_ != NULL) {
    delete stripparam_;
  }
  stripparam_ = NULL;
}
inline const ::Parameters::StripParam& SheetInfo::stripparam() const {
  const ::Parameters::StripParam* p = stripparam_;
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.stripparam)
  return p != NULL ? *p : *reinterpret_cast<const ::Parameters::StripParam*>(
      &::Parameters::_StripParam_default_instance_);
}
inline ::Parameters::StripParam* SheetInfo::release_stripparam() {
  // @@protoc_insertion_point(field_release:Parameters.SheetInfo.stripparam)
  
  ::Parameters::StripParam* temp = stripparam_;
  stripparam_ = NULL;
  return temp;
}
inline ::Parameters::StripParam* SheetInfo::mutable_stripparam() {
  
  if (stripparam_ == NULL) {
    stripparam_ = new ::Parameters::StripParam;
  }
  // @@protoc_insertion_point(field_mutable:Parameters.SheetInfo.stripparam)
  return stripparam_;
}
inline void SheetInfo::set_allocated_stripparam(::Parameters::StripParam* stripparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stripparam_;
  }
  if (stripparam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stripparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stripparam, submessage_arena);
    }
    
  } else {
    
  }
  stripparam_ = stripparam;
  // @@protoc_insertion_point(field_set_allocated:Parameters.SheetInfo.stripparam)
}

// float offsetBoundaryToZero = 10;
inline void SheetInfo::clear_offsetboundarytozero() {
  offsetboundarytozero_ = 0;
}
inline float SheetInfo::offsetboundarytozero() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.offsetBoundaryToZero)
  return offsetboundarytozero_;
}
inline void SheetInfo::set_offsetboundarytozero(float value) {
  
  offsetboundarytozero_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.offsetBoundaryToZero)
}

// float startLength = 11;
inline void SheetInfo::clear_startlength() {
  startlength_ = 0;
}
inline float SheetInfo::startlength() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.startLength)
  return startlength_;
}
inline void SheetInfo::set_startlength(float value) {
  
  startlength_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.startLength)
}

// bool isLeftToRight = 12;
inline void SheetInfo::clear_islefttoright() {
  islefttoright_ = false;
}
inline bool SheetInfo::islefttoright() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.isLeftToRight)
  return islefttoright_;
}
inline void SheetInfo::set_islefttoright(bool value) {
  
  islefttoright_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.isLeftToRight)
}

// float boundOffsetLeft = 13;
inline void SheetInfo::clear_boundoffsetleft() {
  boundoffsetleft_ = 0;
}
inline float SheetInfo::boundoffsetleft() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.boundOffsetLeft)
  return boundoffsetleft_;
}
inline void SheetInfo::set_boundoffsetleft(float value) {
  
  boundoffsetleft_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.boundOffsetLeft)
}

// float boundOffsetRight = 14;
inline void SheetInfo::clear_boundoffsetright() {
  boundoffsetright_ = 0;
}
inline float SheetInfo::boundoffsetright() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.boundOffsetRight)
  return boundoffsetright_;
}
inline void SheetInfo::set_boundoffsetright(float value) {
  
  boundoffsetright_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.boundOffsetRight)
}

// float productThickness = 15;
inline void SheetInfo::clear_productthickness() {
  productthickness_ = 0;
}
inline float SheetInfo::productthickness() const {
  // @@protoc_insertion_point(field_get:Parameters.SheetInfo.productThickness)
  return productthickness_;
}
inline void SheetInfo::set_productthickness(float value) {
  
  productthickness_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SheetInfo.productThickness)
}

// -------------------------------------------------------------------

// RunTimeParam

// int32 threadnum = 1;
inline void RunTimeParam::clear_threadnum() {
  threadnum_ = 0;
}
inline ::google::protobuf::int32 RunTimeParam::threadnum() const {
  // @@protoc_insertion_point(field_get:Parameters.RunTimeParam.threadnum)
  return threadnum_;
}
inline void RunTimeParam::set_threadnum(::google::protobuf::int32 value) {
  
  threadnum_ = value;
  // @@protoc_insertion_point(field_set:Parameters.RunTimeParam.threadnum)
}

// int32 freamwidth = 2;
inline void RunTimeParam::clear_freamwidth() {
  freamwidth_ = 0;
}
inline ::google::protobuf::int32 RunTimeParam::freamwidth() const {
  // @@protoc_insertion_point(field_get:Parameters.RunTimeParam.freamwidth)
  return freamwidth_;
}
inline void RunTimeParam::set_freamwidth(::google::protobuf::int32 value) {
  
  freamwidth_ = value;
  // @@protoc_insertion_point(field_set:Parameters.RunTimeParam.freamwidth)
}

// int32 freamheight = 3;
inline void RunTimeParam::clear_freamheight() {
  freamheight_ = 0;
}
inline ::google::protobuf::int32 RunTimeParam::freamheight() const {
  // @@protoc_insertion_point(field_get:Parameters.RunTimeParam.freamheight)
  return freamheight_;
}
inline void RunTimeParam::set_freamheight(::google::protobuf::int32 value) {
  
  freamheight_ = value;
  // @@protoc_insertion_point(field_set:Parameters.RunTimeParam.freamheight)
}

// int32 dowmsample = 4;
inline void RunTimeParam::clear_dowmsample() {
  dowmsample_ = 0;
}
inline ::google::protobuf::int32 RunTimeParam::dowmsample() const {
  // @@protoc_insertion_point(field_get:Parameters.RunTimeParam.dowmsample)
  return dowmsample_;
}
inline void RunTimeParam::set_dowmsample(::google::protobuf::int32 value) {
  
  dowmsample_ = value;
  // @@protoc_insertion_point(field_set:Parameters.RunTimeParam.dowmsample)
}

// int32 splitsizex = 5;
inline void RunTimeParam::clear_splitsizex() {
  splitsizex_ = 0;
}
inline ::google::protobuf::int32 RunTimeParam::splitsizex() const {
  // @@protoc_insertion_point(field_get:Parameters.RunTimeParam.splitsizex)
  return splitsizex_;
}
inline void RunTimeParam::set_splitsizex(::google::protobuf::int32 value) {
  
  splitsizex_ = value;
  // @@protoc_insertion_point(field_set:Parameters.RunTimeParam.splitsizex)
}

// int32 splitsizey = 6;
inline void RunTimeParam::clear_splitsizey() {
  splitsizey_ = 0;
}
inline ::google::protobuf::int32 RunTimeParam::splitsizey() const {
  // @@protoc_insertion_point(field_get:Parameters.RunTimeParam.splitsizey)
  return splitsizey_;
}
inline void RunTimeParam::set_splitsizey(::google::protobuf::int32 value) {
  
  splitsizey_ = value;
  // @@protoc_insertion_point(field_set:Parameters.RunTimeParam.splitsizey)
}

// bool isgpu = 7;
inline void RunTimeParam::clear_isgpu() {
  isgpu_ = false;
}
inline bool RunTimeParam::isgpu() const {
  // @@protoc_insertion_point(field_get:Parameters.RunTimeParam.isgpu)
  return isgpu_;
}
inline void RunTimeParam::set_isgpu(bool value) {
  
  isgpu_ = value;
  // @@protoc_insertion_point(field_set:Parameters.RunTimeParam.isgpu)
}

// -------------------------------------------------------------------

// SystemRectifyParam

// float xphysicresolution = 1;
inline void SystemRectifyParam::clear_xphysicresolution() {
  xphysicresolution_ = 0;
}
inline float SystemRectifyParam::xphysicresolution() const {
  // @@protoc_insertion_point(field_get:Parameters.SystemRectifyParam.xphysicresolution)
  return xphysicresolution_;
}
inline void SystemRectifyParam::set_xphysicresolution(float value) {
  
  xphysicresolution_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SystemRectifyParam.xphysicresolution)
}

// float yphysicresolution = 3;
inline void SystemRectifyParam::clear_yphysicresolution() {
  yphysicresolution_ = 0;
}
inline float SystemRectifyParam::yphysicresolution() const {
  // @@protoc_insertion_point(field_get:Parameters.SystemRectifyParam.yphysicresolution)
  return yphysicresolution_;
}
inline void SystemRectifyParam::set_yphysicresolution(float value) {
  
  yphysicresolution_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SystemRectifyParam.yphysicresolution)
}

// float lengthPerFream = 2;
inline void SystemRectifyParam::clear_lengthperfream() {
  lengthperfream_ = 0;
}
inline float SystemRectifyParam::lengthperfream() const {
  // @@protoc_insertion_point(field_get:Parameters.SystemRectifyParam.lengthPerFream)
  return lengthperfream_;
}
inline void SystemRectifyParam::set_lengthperfream(float value) {
  
  lengthperfream_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SystemRectifyParam.lengthPerFream)
}

// string rectifyparamfilepath = 4;
inline void SystemRectifyParam::clear_rectifyparamfilepath() {
  rectifyparamfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemRectifyParam::rectifyparamfilepath() const {
  // @@protoc_insertion_point(field_get:Parameters.SystemRectifyParam.rectifyparamfilepath)
  return rectifyparamfilepath_.GetNoArena();
}
inline void SystemRectifyParam::set_rectifyparamfilepath(const ::std::string& value) {
  
  rectifyparamfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Parameters.SystemRectifyParam.rectifyparamfilepath)
}
#if LANG_CXX11
inline void SystemRectifyParam::set_rectifyparamfilepath(::std::string&& value) {
  
  rectifyparamfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Parameters.SystemRectifyParam.rectifyparamfilepath)
}
#endif
inline void SystemRectifyParam::set_rectifyparamfilepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rectifyparamfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Parameters.SystemRectifyParam.rectifyparamfilepath)
}
inline void SystemRectifyParam::set_rectifyparamfilepath(const char* value, size_t size) {
  
  rectifyparamfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Parameters.SystemRectifyParam.rectifyparamfilepath)
}
inline ::std::string* SystemRectifyParam::mutable_rectifyparamfilepath() {
  
  // @@protoc_insertion_point(field_mutable:Parameters.SystemRectifyParam.rectifyparamfilepath)
  return rectifyparamfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemRectifyParam::release_rectifyparamfilepath() {
  // @@protoc_insertion_point(field_release:Parameters.SystemRectifyParam.rectifyparamfilepath)
  
  return rectifyparamfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemRectifyParam::set_allocated_rectifyparamfilepath(::std::string* rectifyparamfilepath) {
  if (rectifyparamfilepath != NULL) {
    
  } else {
    
  }
  rectifyparamfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rectifyparamfilepath);
  // @@protoc_insertion_point(field_set_allocated:Parameters.SystemRectifyParam.rectifyparamfilepath)
}

// int32 offsetY = 5;
inline void SystemRectifyParam::clear_offsety() {
  offsety_ = 0;
}
inline ::google::protobuf::int32 SystemRectifyParam::offsety() const {
  // @@protoc_insertion_point(field_get:Parameters.SystemRectifyParam.offsetY)
  return offsety_;
}
inline void SystemRectifyParam::set_offsety(::google::protobuf::int32 value) {
  
  offsety_ = value;
  // @@protoc_insertion_point(field_set:Parameters.SystemRectifyParam.offsetY)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Parameters

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Parameters::InspectParam_CheckType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Parameters::InspectParam_CheckType>() {
  return ::Parameters::InspectParam_CheckType_descriptor();
}
template <> struct is_proto_enum< ::Parameters::InspectParam_ClassifictionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Parameters::InspectParam_ClassifictionType>() {
  return ::Parameters::InspectParam_ClassifictionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fcheckparam_2eproto__INCLUDED
